{
  "results": {
    "mmlu_redux": {
      "alias": "mmlu_redux"
    },
    "mmlu_redux_anatomy": {
      "alias": " - anatomy",
      "acc,none": 0.42,
      "acc_stderr,none": 0.049604496374885836
    },
    "mmlu_redux_astronomy": {
      "alias": " - astronomy",
      "acc,none": 0.57,
      "acc_stderr,none": 0.04975698519562428
    },
    "mmlu_redux_business_ethics": {
      "alias": " - business_ethics",
      "acc,none": 0.48,
      "acc_stderr,none": 0.05021167315686779
    },
    "mmlu_redux_clinical_knowledge": {
      "alias": " - clinical_knowledge",
      "acc,none": 0.43,
      "acc_stderr,none": 0.049756985195624284
    },
    "mmlu_redux_college_chemistry": {
      "alias": " - college_chemistry",
      "acc,none": 0.41,
      "acc_stderr,none": 0.04943110704237101
    },
    "mmlu_redux_college_computer_science": {
      "alias": " - college_computer_science",
      "acc,none": 0.45,
      "acc_stderr,none": 0.05
    },
    "mmlu_redux_college_mathematics": {
      "alias": " - college_mathematics",
      "acc,none": 0.36,
      "acc_stderr,none": 0.04824181513244218
    },
    "mmlu_redux_college_medicine": {
      "alias": " - college_medicine",
      "acc,none": 0.48,
      "acc_stderr,none": 0.050211673156867795
    },
    "mmlu_redux_college_physics": {
      "alias": " - college_physics",
      "acc,none": 0.43,
      "acc_stderr,none": 0.049756985195624284
    },
    "mmlu_redux_conceptual_physics": {
      "alias": " - conceptual_physics",
      "acc,none": 0.45,
      "acc_stderr,none": 0.05000000000000001
    },
    "mmlu_redux_econometrics": {
      "alias": " - econometrics",
      "acc,none": 0.52,
      "acc_stderr,none": 0.05021167315686781
    },
    "mmlu_redux_electrical_engineering": {
      "alias": " - electrical_engineering",
      "acc,none": 0.44,
      "acc_stderr,none": 0.04988876515698589
    },
    "mmlu_redux_formal_logic": {
      "alias": " - formal_logic",
      "acc,none": 0.55,
      "acc_stderr,none": 0.049999999999999996
    },
    "mmlu_redux_global_facts": {
      "alias": " - global_facts",
      "acc,none": 0.39,
      "acc_stderr,none": 0.04902071300001974
    },
    "mmlu_redux_high_school_chemistry": {
      "alias": " - high_school_chemistry",
      "acc,none": 0.45,
      "acc_stderr,none": 0.049999999999999996
    },
    "mmlu_redux_high_school_geography": {
      "alias": " - high_school_geography",
      "acc,none": 0.47,
      "acc_stderr,none": 0.050161355804659205
    },
    "mmlu_redux_high_school_macroeconomics": {
      "alias": " - high_school_macroeconomics",
      "acc,none": 0.46,
      "acc_stderr,none": 0.05009082659620333
    },
    "mmlu_redux_high_school_mathematics": {
      "alias": " - high_school_mathematics",
      "acc,none": 0.44,
      "acc_stderr,none": 0.04988876515698589
    },
    "mmlu_redux_high_school_physics": {
      "alias": " - high_school_physics",
      "acc,none": 0.44,
      "acc_stderr,none": 0.0498887651569859
    },
    "mmlu_redux_high_school_statistics": {
      "alias": " - high_school_statistics",
      "acc,none": 0.49,
      "acc_stderr,none": 0.05024183937956913
    },
    "mmlu_redux_high_school_us_history": {
      "alias": " - high_school_us_history",
      "acc,none": 0.71,
      "acc_stderr,none": 0.045604802157206845
    },
    "mmlu_redux_human_aging": {
      "alias": " - human_aging",
      "acc,none": 0.39,
      "acc_stderr,none": 0.04902071300001975
    },
    "mmlu_redux_logical_fallacies": {
      "alias": " - logical_fallacies",
      "acc,none": 0.48,
      "acc_stderr,none": 0.050211673156867795
    },
    "mmlu_redux_machine_learning": {
      "alias": " - machine_learning",
      "acc,none": 0.42,
      "acc_stderr,none": 0.049604496374885836
    },
    "mmlu_redux_miscellaneous": {
      "alias": " - miscellaneous",
      "acc,none": 0.43,
      "acc_stderr,none": 0.049756985195624284
    },
    "mmlu_redux_philosophy": {
      "alias": " - philosophy",
      "acc,none": 0.38,
      "acc_stderr,none": 0.048783173121456316
    },
    "mmlu_redux_professional_accounting": {
      "alias": " - professional_accounting",
      "acc,none": 0.4,
      "acc_stderr,none": 0.049236596391733084
    },
    "mmlu_redux_professional_law": {
      "alias": " - professional_law",
      "acc,none": 0.44,
      "acc_stderr,none": 0.04988876515698589
    },
    "mmlu_redux_public_relations": {
      "alias": " - public_relations",
      "acc,none": 0.37,
      "acc_stderr,none": 0.04852365870939099
    },
    "mmlu_redux_virology": {
      "alias": " - virology",
      "acc,none": 0.4,
      "acc_stderr,none": 0.04923659639173309
    }
  },
  "groups": {
    "mmlu_redux": {
      "alias": "mmlu_redux"
    }
  },
  "group_subtasks": {
    "mmlu_redux": [
      "mmlu_redux_machine_learning",
      "mmlu_redux_professional_law",
      "mmlu_redux_logical_fallacies",
      "mmlu_redux_high_school_macroeconomics",
      "mmlu_redux_conceptual_physics",
      "mmlu_redux_human_aging",
      "mmlu_redux_philosophy",
      "mmlu_redux_virology",
      "mmlu_redux_clinical_knowledge",
      "mmlu_redux_college_chemistry",
      "mmlu_redux_astronomy",
      "mmlu_redux_public_relations",
      "mmlu_redux_miscellaneous",
      "mmlu_redux_college_medicine",
      "mmlu_redux_high_school_mathematics",
      "mmlu_redux_high_school_physics",
      "mmlu_redux_anatomy",
      "mmlu_redux_global_facts",
      "mmlu_redux_high_school_statistics",
      "mmlu_redux_high_school_us_history",
      "mmlu_redux_high_school_chemistry",
      "mmlu_redux_college_computer_science",
      "mmlu_redux_econometrics",
      "mmlu_redux_high_school_geography",
      "mmlu_redux_professional_accounting",
      "mmlu_redux_business_ethics",
      "mmlu_redux_formal_logic",
      "mmlu_redux_college_mathematics",
      "mmlu_redux_electrical_engineering",
      "mmlu_redux_college_physics"
    ]
  },
  "configs": {
    "mmlu_redux_anatomy": {
      "task": "mmlu_redux_anatomy",
      "task_alias": "anatomy",
      "dataset_path": "edinburgh-dawg/mmlu-redux",
      "dataset_name": "anatomy",
      "dataset_kwargs": {
        "trust_remote_code": true
      },
      "test_split": "test",
      "fewshot_split": "test",
      "process_docs": "def preprocessing(dataset):\n    \n    def process_doc(doc):\n        \n        original_doc = copy.copy(doc)\n        if can_be_flipped(doc['question']):\n            # randomly select an answer to hide:\n            answer_to_hide = random.choice(doc['choices'])        \n            doc['choices'].remove(answer_to_hide)\n            doc['choices'].append(\"None of the above\")\n            correct_answer = original_doc['choices'][original_doc['answer']]\n            if correct_answer not in doc['choices']:\n                correct_answer = \"None of the above\"\n            \n            doc['answer'] = doc['choices'].index(correct_answer)\n        return doc\n        \n    return dataset.map(process_doc)\n",
      "doc_to_text": "{{question.strip()}}\nA. {{choices[0]}}\nB. {{choices[1]}}\nC. {{choices[2]}}\nD. {{choices[3]}}\nAnswer:",
      "doc_to_target": "answer",
      "doc_to_choice": [
        "A",
        "B",
        "C",
        "D"
      ],
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "fewshot_config": {
        "sampler": "first_n"
      },
      "num_fewshot": 3,
      "metric_list": [
        {
          "metric": "acc",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "multiple_choice",
      "repeats": 1,
      "should_decontaminate": false,
      "metadata": {
        "version": 1.0
      }
    },
    "mmlu_redux_astronomy": {
      "task": "mmlu_redux_astronomy",
      "task_alias": "astronomy",
      "dataset_path": "edinburgh-dawg/mmlu-redux",
      "dataset_name": "astronomy",
      "dataset_kwargs": {
        "trust_remote_code": true
      },
      "test_split": "test",
      "fewshot_split": "test",
      "process_docs": "def preprocessing(dataset):\n    \n    def process_doc(doc):\n        \n        original_doc = copy.copy(doc)\n        if can_be_flipped(doc['question']):\n            # randomly select an answer to hide:\n            answer_to_hide = random.choice(doc['choices'])        \n            doc['choices'].remove(answer_to_hide)\n            doc['choices'].append(\"None of the above\")\n            correct_answer = original_doc['choices'][original_doc['answer']]\n            if correct_answer not in doc['choices']:\n                correct_answer = \"None of the above\"\n            \n            doc['answer'] = doc['choices'].index(correct_answer)\n        return doc\n        \n    return dataset.map(process_doc)\n",
      "doc_to_text": "{{question.strip()}}\nA. {{choices[0]}}\nB. {{choices[1]}}\nC. {{choices[2]}}\nD. {{choices[3]}}\nAnswer:",
      "doc_to_target": "answer",
      "doc_to_choice": [
        "A",
        "B",
        "C",
        "D"
      ],
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "fewshot_config": {
        "sampler": "first_n"
      },
      "num_fewshot": 3,
      "metric_list": [
        {
          "metric": "acc",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "multiple_choice",
      "repeats": 1,
      "should_decontaminate": false,
      "metadata": {
        "version": 1.0
      }
    },
    "mmlu_redux_business_ethics": {
      "task": "mmlu_redux_business_ethics",
      "task_alias": "business_ethics",
      "dataset_path": "edinburgh-dawg/mmlu-redux",
      "dataset_name": "business_ethics",
      "dataset_kwargs": {
        "trust_remote_code": true
      },
      "test_split": "test",
      "fewshot_split": "test",
      "process_docs": "def preprocessing(dataset):\n    \n    def process_doc(doc):\n        \n        original_doc = copy.copy(doc)\n        if can_be_flipped(doc['question']):\n            # randomly select an answer to hide:\n            answer_to_hide = random.choice(doc['choices'])        \n            doc['choices'].remove(answer_to_hide)\n            doc['choices'].append(\"None of the above\")\n            correct_answer = original_doc['choices'][original_doc['answer']]\n            if correct_answer not in doc['choices']:\n                correct_answer = \"None of the above\"\n            \n            doc['answer'] = doc['choices'].index(correct_answer)\n        return doc\n        \n    return dataset.map(process_doc)\n",
      "doc_to_text": "{{question.strip()}}\nA. {{choices[0]}}\nB. {{choices[1]}}\nC. {{choices[2]}}\nD. {{choices[3]}}\nAnswer:",
      "doc_to_target": "answer",
      "doc_to_choice": [
        "A",
        "B",
        "C",
        "D"
      ],
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "fewshot_config": {
        "sampler": "first_n"
      },
      "num_fewshot": 3,
      "metric_list": [
        {
          "metric": "acc",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "multiple_choice",
      "repeats": 1,
      "should_decontaminate": false,
      "metadata": {
        "version": 1.0
      }
    },
    "mmlu_redux_clinical_knowledge": {
      "task": "mmlu_redux_clinical_knowledge",
      "task_alias": "clinical_knowledge",
      "dataset_path": "edinburgh-dawg/mmlu-redux",
      "dataset_name": "clinical_knowledge",
      "dataset_kwargs": {
        "trust_remote_code": true
      },
      "test_split": "test",
      "fewshot_split": "test",
      "process_docs": "def preprocessing(dataset):\n    \n    def process_doc(doc):\n        \n        original_doc = copy.copy(doc)\n        if can_be_flipped(doc['question']):\n            # randomly select an answer to hide:\n            answer_to_hide = random.choice(doc['choices'])        \n            doc['choices'].remove(answer_to_hide)\n            doc['choices'].append(\"None of the above\")\n            correct_answer = original_doc['choices'][original_doc['answer']]\n            if correct_answer not in doc['choices']:\n                correct_answer = \"None of the above\"\n            \n            doc['answer'] = doc['choices'].index(correct_answer)\n        return doc\n        \n    return dataset.map(process_doc)\n",
      "doc_to_text": "{{question.strip()}}\nA. {{choices[0]}}\nB. {{choices[1]}}\nC. {{choices[2]}}\nD. {{choices[3]}}\nAnswer:",
      "doc_to_target": "answer",
      "doc_to_choice": [
        "A",
        "B",
        "C",
        "D"
      ],
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "fewshot_config": {
        "sampler": "first_n"
      },
      "num_fewshot": 3,
      "metric_list": [
        {
          "metric": "acc",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "multiple_choice",
      "repeats": 1,
      "should_decontaminate": false,
      "metadata": {
        "version": 1.0
      }
    },
    "mmlu_redux_college_chemistry": {
      "task": "mmlu_redux_college_chemistry",
      "task_alias": "college_chemistry",
      "dataset_path": "edinburgh-dawg/mmlu-redux",
      "dataset_name": "college_chemistry",
      "dataset_kwargs": {
        "trust_remote_code": true
      },
      "test_split": "test",
      "fewshot_split": "test",
      "process_docs": "def preprocessing(dataset):\n    \n    def process_doc(doc):\n        \n        original_doc = copy.copy(doc)\n        if can_be_flipped(doc['question']):\n            # randomly select an answer to hide:\n            answer_to_hide = random.choice(doc['choices'])        \n            doc['choices'].remove(answer_to_hide)\n            doc['choices'].append(\"None of the above\")\n            correct_answer = original_doc['choices'][original_doc['answer']]\n            if correct_answer not in doc['choices']:\n                correct_answer = \"None of the above\"\n            \n            doc['answer'] = doc['choices'].index(correct_answer)\n        return doc\n        \n    return dataset.map(process_doc)\n",
      "doc_to_text": "{{question.strip()}}\nA. {{choices[0]}}\nB. {{choices[1]}}\nC. {{choices[2]}}\nD. {{choices[3]}}\nAnswer:",
      "doc_to_target": "answer",
      "doc_to_choice": [
        "A",
        "B",
        "C",
        "D"
      ],
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "fewshot_config": {
        "sampler": "first_n"
      },
      "num_fewshot": 3,
      "metric_list": [
        {
          "metric": "acc",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "multiple_choice",
      "repeats": 1,
      "should_decontaminate": false,
      "metadata": {
        "version": 1.0
      }
    },
    "mmlu_redux_college_computer_science": {
      "task": "mmlu_redux_college_computer_science",
      "task_alias": "college_computer_science",
      "dataset_path": "edinburgh-dawg/mmlu-redux",
      "dataset_name": "college_computer_science",
      "dataset_kwargs": {
        "trust_remote_code": true
      },
      "test_split": "test",
      "fewshot_split": "test",
      "process_docs": "def preprocessing(dataset):\n    \n    def process_doc(doc):\n        \n        original_doc = copy.copy(doc)\n        if can_be_flipped(doc['question']):\n            # randomly select an answer to hide:\n            answer_to_hide = random.choice(doc['choices'])        \n            doc['choices'].remove(answer_to_hide)\n            doc['choices'].append(\"None of the above\")\n            correct_answer = original_doc['choices'][original_doc['answer']]\n            if correct_answer not in doc['choices']:\n                correct_answer = \"None of the above\"\n            \n            doc['answer'] = doc['choices'].index(correct_answer)\n        return doc\n        \n    return dataset.map(process_doc)\n",
      "doc_to_text": "{{question.strip()}}\nA. {{choices[0]}}\nB. {{choices[1]}}\nC. {{choices[2]}}\nD. {{choices[3]}}\nAnswer:",
      "doc_to_target": "answer",
      "doc_to_choice": [
        "A",
        "B",
        "C",
        "D"
      ],
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "fewshot_config": {
        "sampler": "first_n"
      },
      "num_fewshot": 3,
      "metric_list": [
        {
          "metric": "acc",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "multiple_choice",
      "repeats": 1,
      "should_decontaminate": false,
      "metadata": {
        "version": 1.0
      }
    },
    "mmlu_redux_college_mathematics": {
      "task": "mmlu_redux_college_mathematics",
      "task_alias": "college_mathematics",
      "dataset_path": "edinburgh-dawg/mmlu-redux",
      "dataset_name": "college_mathematics",
      "dataset_kwargs": {
        "trust_remote_code": true
      },
      "test_split": "test",
      "fewshot_split": "test",
      "process_docs": "def preprocessing(dataset):\n    \n    def process_doc(doc):\n        \n        original_doc = copy.copy(doc)\n        if can_be_flipped(doc['question']):\n            # randomly select an answer to hide:\n            answer_to_hide = random.choice(doc['choices'])        \n            doc['choices'].remove(answer_to_hide)\n            doc['choices'].append(\"None of the above\")\n            correct_answer = original_doc['choices'][original_doc['answer']]\n            if correct_answer not in doc['choices']:\n                correct_answer = \"None of the above\"\n            \n            doc['answer'] = doc['choices'].index(correct_answer)\n        return doc\n        \n    return dataset.map(process_doc)\n",
      "doc_to_text": "{{question.strip()}}\nA. {{choices[0]}}\nB. {{choices[1]}}\nC. {{choices[2]}}\nD. {{choices[3]}}\nAnswer:",
      "doc_to_target": "answer",
      "doc_to_choice": [
        "A",
        "B",
        "C",
        "D"
      ],
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "fewshot_config": {
        "sampler": "first_n"
      },
      "num_fewshot": 3,
      "metric_list": [
        {
          "metric": "acc",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "multiple_choice",
      "repeats": 1,
      "should_decontaminate": false,
      "metadata": {
        "version": 1.0
      }
    },
    "mmlu_redux_college_medicine": {
      "task": "mmlu_redux_college_medicine",
      "task_alias": "college_medicine",
      "dataset_path": "edinburgh-dawg/mmlu-redux",
      "dataset_name": "college_medicine",
      "dataset_kwargs": {
        "trust_remote_code": true
      },
      "test_split": "test",
      "fewshot_split": "test",
      "process_docs": "def preprocessing(dataset):\n    \n    def process_doc(doc):\n        \n        original_doc = copy.copy(doc)\n        if can_be_flipped(doc['question']):\n            # randomly select an answer to hide:\n            answer_to_hide = random.choice(doc['choices'])        \n            doc['choices'].remove(answer_to_hide)\n            doc['choices'].append(\"None of the above\")\n            correct_answer = original_doc['choices'][original_doc['answer']]\n            if correct_answer not in doc['choices']:\n                correct_answer = \"None of the above\"\n            \n            doc['answer'] = doc['choices'].index(correct_answer)\n        return doc\n        \n    return dataset.map(process_doc)\n",
      "doc_to_text": "{{question.strip()}}\nA. {{choices[0]}}\nB. {{choices[1]}}\nC. {{choices[2]}}\nD. {{choices[3]}}\nAnswer:",
      "doc_to_target": "answer",
      "doc_to_choice": [
        "A",
        "B",
        "C",
        "D"
      ],
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "fewshot_config": {
        "sampler": "first_n"
      },
      "num_fewshot": 3,
      "metric_list": [
        {
          "metric": "acc",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "multiple_choice",
      "repeats": 1,
      "should_decontaminate": false,
      "metadata": {
        "version": 1.0
      }
    },
    "mmlu_redux_college_physics": {
      "task": "mmlu_redux_college_physics",
      "task_alias": "college_physics",
      "dataset_path": "edinburgh-dawg/mmlu-redux",
      "dataset_name": "college_physics",
      "dataset_kwargs": {
        "trust_remote_code": true
      },
      "test_split": "test",
      "fewshot_split": "test",
      "process_docs": "def preprocessing(dataset):\n    \n    def process_doc(doc):\n        \n        original_doc = copy.copy(doc)\n        if can_be_flipped(doc['question']):\n            # randomly select an answer to hide:\n            answer_to_hide = random.choice(doc['choices'])        \n            doc['choices'].remove(answer_to_hide)\n            doc['choices'].append(\"None of the above\")\n            correct_answer = original_doc['choices'][original_doc['answer']]\n            if correct_answer not in doc['choices']:\n                correct_answer = \"None of the above\"\n            \n            doc['answer'] = doc['choices'].index(correct_answer)\n        return doc\n        \n    return dataset.map(process_doc)\n",
      "doc_to_text": "{{question.strip()}}\nA. {{choices[0]}}\nB. {{choices[1]}}\nC. {{choices[2]}}\nD. {{choices[3]}}\nAnswer:",
      "doc_to_target": "answer",
      "doc_to_choice": [
        "A",
        "B",
        "C",
        "D"
      ],
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "fewshot_config": {
        "sampler": "first_n"
      },
      "num_fewshot": 3,
      "metric_list": [
        {
          "metric": "acc",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "multiple_choice",
      "repeats": 1,
      "should_decontaminate": false,
      "metadata": {
        "version": 1.0
      }
    },
    "mmlu_redux_conceptual_physics": {
      "task": "mmlu_redux_conceptual_physics",
      "task_alias": "conceptual_physics",
      "dataset_path": "edinburgh-dawg/mmlu-redux",
      "dataset_name": "conceptual_physics",
      "dataset_kwargs": {
        "trust_remote_code": true
      },
      "test_split": "test",
      "fewshot_split": "test",
      "process_docs": "def preprocessing(dataset):\n    \n    def process_doc(doc):\n        \n        original_doc = copy.copy(doc)\n        if can_be_flipped(doc['question']):\n            # randomly select an answer to hide:\n            answer_to_hide = random.choice(doc['choices'])        \n            doc['choices'].remove(answer_to_hide)\n            doc['choices'].append(\"None of the above\")\n            correct_answer = original_doc['choices'][original_doc['answer']]\n            if correct_answer not in doc['choices']:\n                correct_answer = \"None of the above\"\n            \n            doc['answer'] = doc['choices'].index(correct_answer)\n        return doc\n        \n    return dataset.map(process_doc)\n",
      "doc_to_text": "{{question.strip()}}\nA. {{choices[0]}}\nB. {{choices[1]}}\nC. {{choices[2]}}\nD. {{choices[3]}}\nAnswer:",
      "doc_to_target": "answer",
      "doc_to_choice": [
        "A",
        "B",
        "C",
        "D"
      ],
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "fewshot_config": {
        "sampler": "first_n"
      },
      "num_fewshot": 3,
      "metric_list": [
        {
          "metric": "acc",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "multiple_choice",
      "repeats": 1,
      "should_decontaminate": false,
      "metadata": {
        "version": 1.0
      }
    },
    "mmlu_redux_econometrics": {
      "task": "mmlu_redux_econometrics",
      "task_alias": "econometrics",
      "dataset_path": "edinburgh-dawg/mmlu-redux",
      "dataset_name": "econometrics",
      "dataset_kwargs": {
        "trust_remote_code": true
      },
      "test_split": "test",
      "fewshot_split": "test",
      "process_docs": "def preprocessing(dataset):\n    \n    def process_doc(doc):\n        \n        original_doc = copy.copy(doc)\n        if can_be_flipped(doc['question']):\n            # randomly select an answer to hide:\n            answer_to_hide = random.choice(doc['choices'])        \n            doc['choices'].remove(answer_to_hide)\n            doc['choices'].append(\"None of the above\")\n            correct_answer = original_doc['choices'][original_doc['answer']]\n            if correct_answer not in doc['choices']:\n                correct_answer = \"None of the above\"\n            \n            doc['answer'] = doc['choices'].index(correct_answer)\n        return doc\n        \n    return dataset.map(process_doc)\n",
      "doc_to_text": "{{question.strip()}}\nA. {{choices[0]}}\nB. {{choices[1]}}\nC. {{choices[2]}}\nD. {{choices[3]}}\nAnswer:",
      "doc_to_target": "answer",
      "doc_to_choice": [
        "A",
        "B",
        "C",
        "D"
      ],
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "fewshot_config": {
        "sampler": "first_n"
      },
      "num_fewshot": 3,
      "metric_list": [
        {
          "metric": "acc",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "multiple_choice",
      "repeats": 1,
      "should_decontaminate": false,
      "metadata": {
        "version": 1.0
      }
    },
    "mmlu_redux_electrical_engineering": {
      "task": "mmlu_redux_electrical_engineering",
      "task_alias": "electrical_engineering",
      "dataset_path": "edinburgh-dawg/mmlu-redux",
      "dataset_name": "electrical_engineering",
      "dataset_kwargs": {
        "trust_remote_code": true
      },
      "test_split": "test",
      "fewshot_split": "test",
      "process_docs": "def preprocessing(dataset):\n    \n    def process_doc(doc):\n        \n        original_doc = copy.copy(doc)\n        if can_be_flipped(doc['question']):\n            # randomly select an answer to hide:\n            answer_to_hide = random.choice(doc['choices'])        \n            doc['choices'].remove(answer_to_hide)\n            doc['choices'].append(\"None of the above\")\n            correct_answer = original_doc['choices'][original_doc['answer']]\n            if correct_answer not in doc['choices']:\n                correct_answer = \"None of the above\"\n            \n            doc['answer'] = doc['choices'].index(correct_answer)\n        return doc\n        \n    return dataset.map(process_doc)\n",
      "doc_to_text": "{{question.strip()}}\nA. {{choices[0]}}\nB. {{choices[1]}}\nC. {{choices[2]}}\nD. {{choices[3]}}\nAnswer:",
      "doc_to_target": "answer",
      "doc_to_choice": [
        "A",
        "B",
        "C",
        "D"
      ],
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "fewshot_config": {
        "sampler": "first_n"
      },
      "num_fewshot": 3,
      "metric_list": [
        {
          "metric": "acc",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "multiple_choice",
      "repeats": 1,
      "should_decontaminate": false,
      "metadata": {
        "version": 1.0
      }
    },
    "mmlu_redux_formal_logic": {
      "task": "mmlu_redux_formal_logic",
      "task_alias": "formal_logic",
      "dataset_path": "edinburgh-dawg/mmlu-redux",
      "dataset_name": "formal_logic",
      "dataset_kwargs": {
        "trust_remote_code": true
      },
      "test_split": "test",
      "fewshot_split": "test",
      "process_docs": "def preprocessing(dataset):\n    \n    def process_doc(doc):\n        \n        original_doc = copy.copy(doc)\n        if can_be_flipped(doc['question']):\n            # randomly select an answer to hide:\n            answer_to_hide = random.choice(doc['choices'])        \n            doc['choices'].remove(answer_to_hide)\n            doc['choices'].append(\"None of the above\")\n            correct_answer = original_doc['choices'][original_doc['answer']]\n            if correct_answer not in doc['choices']:\n                correct_answer = \"None of the above\"\n            \n            doc['answer'] = doc['choices'].index(correct_answer)\n        return doc\n        \n    return dataset.map(process_doc)\n",
      "doc_to_text": "{{question.strip()}}\nA. {{choices[0]}}\nB. {{choices[1]}}\nC. {{choices[2]}}\nD. {{choices[3]}}\nAnswer:",
      "doc_to_target": "answer",
      "doc_to_choice": [
        "A",
        "B",
        "C",
        "D"
      ],
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "fewshot_config": {
        "sampler": "first_n"
      },
      "num_fewshot": 3,
      "metric_list": [
        {
          "metric": "acc",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "multiple_choice",
      "repeats": 1,
      "should_decontaminate": false,
      "metadata": {
        "version": 1.0
      }
    },
    "mmlu_redux_global_facts": {
      "task": "mmlu_redux_global_facts",
      "task_alias": "global_facts",
      "dataset_path": "edinburgh-dawg/mmlu-redux",
      "dataset_name": "global_facts",
      "dataset_kwargs": {
        "trust_remote_code": true
      },
      "test_split": "test",
      "fewshot_split": "test",
      "process_docs": "def preprocessing(dataset):\n    \n    def process_doc(doc):\n        \n        original_doc = copy.copy(doc)\n        if can_be_flipped(doc['question']):\n            # randomly select an answer to hide:\n            answer_to_hide = random.choice(doc['choices'])        \n            doc['choices'].remove(answer_to_hide)\n            doc['choices'].append(\"None of the above\")\n            correct_answer = original_doc['choices'][original_doc['answer']]\n            if correct_answer not in doc['choices']:\n                correct_answer = \"None of the above\"\n            \n            doc['answer'] = doc['choices'].index(correct_answer)\n        return doc\n        \n    return dataset.map(process_doc)\n",
      "doc_to_text": "{{question.strip()}}\nA. {{choices[0]}}\nB. {{choices[1]}}\nC. {{choices[2]}}\nD. {{choices[3]}}\nAnswer:",
      "doc_to_target": "answer",
      "doc_to_choice": [
        "A",
        "B",
        "C",
        "D"
      ],
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "fewshot_config": {
        "sampler": "first_n"
      },
      "num_fewshot": 3,
      "metric_list": [
        {
          "metric": "acc",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "multiple_choice",
      "repeats": 1,
      "should_decontaminate": false,
      "metadata": {
        "version": 1.0
      }
    },
    "mmlu_redux_high_school_chemistry": {
      "task": "mmlu_redux_high_school_chemistry",
      "task_alias": "high_school_chemistry",
      "dataset_path": "edinburgh-dawg/mmlu-redux",
      "dataset_name": "high_school_chemistry",
      "dataset_kwargs": {
        "trust_remote_code": true
      },
      "test_split": "test",
      "fewshot_split": "test",
      "process_docs": "def preprocessing(dataset):\n    \n    def process_doc(doc):\n        \n        original_doc = copy.copy(doc)\n        if can_be_flipped(doc['question']):\n            # randomly select an answer to hide:\n            answer_to_hide = random.choice(doc['choices'])        \n            doc['choices'].remove(answer_to_hide)\n            doc['choices'].append(\"None of the above\")\n            correct_answer = original_doc['choices'][original_doc['answer']]\n            if correct_answer not in doc['choices']:\n                correct_answer = \"None of the above\"\n            \n            doc['answer'] = doc['choices'].index(correct_answer)\n        return doc\n        \n    return dataset.map(process_doc)\n",
      "doc_to_text": "{{question.strip()}}\nA. {{choices[0]}}\nB. {{choices[1]}}\nC. {{choices[2]}}\nD. {{choices[3]}}\nAnswer:",
      "doc_to_target": "answer",
      "doc_to_choice": [
        "A",
        "B",
        "C",
        "D"
      ],
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "fewshot_config": {
        "sampler": "first_n"
      },
      "num_fewshot": 3,
      "metric_list": [
        {
          "metric": "acc",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "multiple_choice",
      "repeats": 1,
      "should_decontaminate": false,
      "metadata": {
        "version": 1.0
      }
    },
    "mmlu_redux_high_school_geography": {
      "task": "mmlu_redux_high_school_geography",
      "task_alias": "high_school_geography",
      "dataset_path": "edinburgh-dawg/mmlu-redux",
      "dataset_name": "high_school_geography",
      "dataset_kwargs": {
        "trust_remote_code": true
      },
      "test_split": "test",
      "fewshot_split": "test",
      "process_docs": "def preprocessing(dataset):\n    \n    def process_doc(doc):\n        \n        original_doc = copy.copy(doc)\n        if can_be_flipped(doc['question']):\n            # randomly select an answer to hide:\n            answer_to_hide = random.choice(doc['choices'])        \n            doc['choices'].remove(answer_to_hide)\n            doc['choices'].append(\"None of the above\")\n            correct_answer = original_doc['choices'][original_doc['answer']]\n            if correct_answer not in doc['choices']:\n                correct_answer = \"None of the above\"\n            \n            doc['answer'] = doc['choices'].index(correct_answer)\n        return doc\n        \n    return dataset.map(process_doc)\n",
      "doc_to_text": "{{question.strip()}}\nA. {{choices[0]}}\nB. {{choices[1]}}\nC. {{choices[2]}}\nD. {{choices[3]}}\nAnswer:",
      "doc_to_target": "answer",
      "doc_to_choice": [
        "A",
        "B",
        "C",
        "D"
      ],
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "fewshot_config": {
        "sampler": "first_n"
      },
      "num_fewshot": 3,
      "metric_list": [
        {
          "metric": "acc",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "multiple_choice",
      "repeats": 1,
      "should_decontaminate": false,
      "metadata": {
        "version": 1.0
      }
    },
    "mmlu_redux_high_school_macroeconomics": {
      "task": "mmlu_redux_high_school_macroeconomics",
      "task_alias": "high_school_macroeconomics",
      "dataset_path": "edinburgh-dawg/mmlu-redux",
      "dataset_name": "high_school_macroeconomics",
      "dataset_kwargs": {
        "trust_remote_code": true
      },
      "test_split": "test",
      "fewshot_split": "test",
      "process_docs": "def preprocessing(dataset):\n    \n    def process_doc(doc):\n        \n        original_doc = copy.copy(doc)\n        if can_be_flipped(doc['question']):\n            # randomly select an answer to hide:\n            answer_to_hide = random.choice(doc['choices'])        \n            doc['choices'].remove(answer_to_hide)\n            doc['choices'].append(\"None of the above\")\n            correct_answer = original_doc['choices'][original_doc['answer']]\n            if correct_answer not in doc['choices']:\n                correct_answer = \"None of the above\"\n            \n            doc['answer'] = doc['choices'].index(correct_answer)\n        return doc\n        \n    return dataset.map(process_doc)\n",
      "doc_to_text": "{{question.strip()}}\nA. {{choices[0]}}\nB. {{choices[1]}}\nC. {{choices[2]}}\nD. {{choices[3]}}\nAnswer:",
      "doc_to_target": "answer",
      "doc_to_choice": [
        "A",
        "B",
        "C",
        "D"
      ],
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "fewshot_config": {
        "sampler": "first_n"
      },
      "num_fewshot": 3,
      "metric_list": [
        {
          "metric": "acc",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "multiple_choice",
      "repeats": 1,
      "should_decontaminate": false,
      "metadata": {
        "version": 1.0
      }
    },
    "mmlu_redux_high_school_mathematics": {
      "task": "mmlu_redux_high_school_mathematics",
      "task_alias": "high_school_mathematics",
      "dataset_path": "edinburgh-dawg/mmlu-redux",
      "dataset_name": "high_school_mathematics",
      "dataset_kwargs": {
        "trust_remote_code": true
      },
      "test_split": "test",
      "fewshot_split": "test",
      "process_docs": "def preprocessing(dataset):\n    \n    def process_doc(doc):\n        \n        original_doc = copy.copy(doc)\n        if can_be_flipped(doc['question']):\n            # randomly select an answer to hide:\n            answer_to_hide = random.choice(doc['choices'])        \n            doc['choices'].remove(answer_to_hide)\n            doc['choices'].append(\"None of the above\")\n            correct_answer = original_doc['choices'][original_doc['answer']]\n            if correct_answer not in doc['choices']:\n                correct_answer = \"None of the above\"\n            \n            doc['answer'] = doc['choices'].index(correct_answer)\n        return doc\n        \n    return dataset.map(process_doc)\n",
      "doc_to_text": "{{question.strip()}}\nA. {{choices[0]}}\nB. {{choices[1]}}\nC. {{choices[2]}}\nD. {{choices[3]}}\nAnswer:",
      "doc_to_target": "answer",
      "doc_to_choice": [
        "A",
        "B",
        "C",
        "D"
      ],
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "fewshot_config": {
        "sampler": "first_n"
      },
      "num_fewshot": 3,
      "metric_list": [
        {
          "metric": "acc",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "multiple_choice",
      "repeats": 1,
      "should_decontaminate": false,
      "metadata": {
        "version": 1.0
      }
    },
    "mmlu_redux_high_school_physics": {
      "task": "mmlu_redux_high_school_physics",
      "task_alias": "high_school_physics",
      "dataset_path": "edinburgh-dawg/mmlu-redux",
      "dataset_name": "high_school_physics",
      "dataset_kwargs": {
        "trust_remote_code": true
      },
      "test_split": "test",
      "fewshot_split": "test",
      "process_docs": "def preprocessing(dataset):\n    \n    def process_doc(doc):\n        \n        original_doc = copy.copy(doc)\n        if can_be_flipped(doc['question']):\n            # randomly select an answer to hide:\n            answer_to_hide = random.choice(doc['choices'])        \n            doc['choices'].remove(answer_to_hide)\n            doc['choices'].append(\"None of the above\")\n            correct_answer = original_doc['choices'][original_doc['answer']]\n            if correct_answer not in doc['choices']:\n                correct_answer = \"None of the above\"\n            \n            doc['answer'] = doc['choices'].index(correct_answer)\n        return doc\n        \n    return dataset.map(process_doc)\n",
      "doc_to_text": "{{question.strip()}}\nA. {{choices[0]}}\nB. {{choices[1]}}\nC. {{choices[2]}}\nD. {{choices[3]}}\nAnswer:",
      "doc_to_target": "answer",
      "doc_to_choice": [
        "A",
        "B",
        "C",
        "D"
      ],
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "fewshot_config": {
        "sampler": "first_n"
      },
      "num_fewshot": 3,
      "metric_list": [
        {
          "metric": "acc",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "multiple_choice",
      "repeats": 1,
      "should_decontaminate": false,
      "metadata": {
        "version": 1.0
      }
    },
    "mmlu_redux_high_school_statistics": {
      "task": "mmlu_redux_high_school_statistics",
      "task_alias": "high_school_statistics",
      "dataset_path": "edinburgh-dawg/mmlu-redux",
      "dataset_name": "high_school_statistics",
      "dataset_kwargs": {
        "trust_remote_code": true
      },
      "test_split": "test",
      "fewshot_split": "test",
      "process_docs": "def preprocessing(dataset):\n    \n    def process_doc(doc):\n        \n        original_doc = copy.copy(doc)\n        if can_be_flipped(doc['question']):\n            # randomly select an answer to hide:\n            answer_to_hide = random.choice(doc['choices'])        \n            doc['choices'].remove(answer_to_hide)\n            doc['choices'].append(\"None of the above\")\n            correct_answer = original_doc['choices'][original_doc['answer']]\n            if correct_answer not in doc['choices']:\n                correct_answer = \"None of the above\"\n            \n            doc['answer'] = doc['choices'].index(correct_answer)\n        return doc\n        \n    return dataset.map(process_doc)\n",
      "doc_to_text": "{{question.strip()}}\nA. {{choices[0]}}\nB. {{choices[1]}}\nC. {{choices[2]}}\nD. {{choices[3]}}\nAnswer:",
      "doc_to_target": "answer",
      "doc_to_choice": [
        "A",
        "B",
        "C",
        "D"
      ],
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "fewshot_config": {
        "sampler": "first_n"
      },
      "num_fewshot": 3,
      "metric_list": [
        {
          "metric": "acc",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "multiple_choice",
      "repeats": 1,
      "should_decontaminate": false,
      "metadata": {
        "version": 1.0
      }
    },
    "mmlu_redux_high_school_us_history": {
      "task": "mmlu_redux_high_school_us_history",
      "task_alias": "high_school_us_history",
      "dataset_path": "edinburgh-dawg/mmlu-redux",
      "dataset_name": "high_school_us_history",
      "dataset_kwargs": {
        "trust_remote_code": true
      },
      "test_split": "test",
      "fewshot_split": "test",
      "process_docs": "def preprocessing(dataset):\n    \n    def process_doc(doc):\n        \n        original_doc = copy.copy(doc)\n        if can_be_flipped(doc['question']):\n            # randomly select an answer to hide:\n            answer_to_hide = random.choice(doc['choices'])        \n            doc['choices'].remove(answer_to_hide)\n            doc['choices'].append(\"None of the above\")\n            correct_answer = original_doc['choices'][original_doc['answer']]\n            if correct_answer not in doc['choices']:\n                correct_answer = \"None of the above\"\n            \n            doc['answer'] = doc['choices'].index(correct_answer)\n        return doc\n        \n    return dataset.map(process_doc)\n",
      "doc_to_text": "{{question.strip()}}\nA. {{choices[0]}}\nB. {{choices[1]}}\nC. {{choices[2]}}\nD. {{choices[3]}}\nAnswer:",
      "doc_to_target": "answer",
      "doc_to_choice": [
        "A",
        "B",
        "C",
        "D"
      ],
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "fewshot_config": {
        "sampler": "first_n"
      },
      "num_fewshot": 3,
      "metric_list": [
        {
          "metric": "acc",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "multiple_choice",
      "repeats": 1,
      "should_decontaminate": false,
      "metadata": {
        "version": 1.0
      }
    },
    "mmlu_redux_human_aging": {
      "task": "mmlu_redux_human_aging",
      "task_alias": "human_aging",
      "dataset_path": "edinburgh-dawg/mmlu-redux",
      "dataset_name": "human_aging",
      "dataset_kwargs": {
        "trust_remote_code": true
      },
      "test_split": "test",
      "fewshot_split": "test",
      "process_docs": "def preprocessing(dataset):\n    \n    def process_doc(doc):\n        \n        original_doc = copy.copy(doc)\n        if can_be_flipped(doc['question']):\n            # randomly select an answer to hide:\n            answer_to_hide = random.choice(doc['choices'])        \n            doc['choices'].remove(answer_to_hide)\n            doc['choices'].append(\"None of the above\")\n            correct_answer = original_doc['choices'][original_doc['answer']]\n            if correct_answer not in doc['choices']:\n                correct_answer = \"None of the above\"\n            \n            doc['answer'] = doc['choices'].index(correct_answer)\n        return doc\n        \n    return dataset.map(process_doc)\n",
      "doc_to_text": "{{question.strip()}}\nA. {{choices[0]}}\nB. {{choices[1]}}\nC. {{choices[2]}}\nD. {{choices[3]}}\nAnswer:",
      "doc_to_target": "answer",
      "doc_to_choice": [
        "A",
        "B",
        "C",
        "D"
      ],
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "fewshot_config": {
        "sampler": "first_n"
      },
      "num_fewshot": 3,
      "metric_list": [
        {
          "metric": "acc",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "multiple_choice",
      "repeats": 1,
      "should_decontaminate": false,
      "metadata": {
        "version": 1.0
      }
    },
    "mmlu_redux_logical_fallacies": {
      "task": "mmlu_redux_logical_fallacies",
      "task_alias": "logical_fallacies",
      "dataset_path": "edinburgh-dawg/mmlu-redux",
      "dataset_name": "logical_fallacies",
      "dataset_kwargs": {
        "trust_remote_code": true
      },
      "test_split": "test",
      "fewshot_split": "test",
      "process_docs": "def preprocessing(dataset):\n    \n    def process_doc(doc):\n        \n        original_doc = copy.copy(doc)\n        if can_be_flipped(doc['question']):\n            # randomly select an answer to hide:\n            answer_to_hide = random.choice(doc['choices'])        \n            doc['choices'].remove(answer_to_hide)\n            doc['choices'].append(\"None of the above\")\n            correct_answer = original_doc['choices'][original_doc['answer']]\n            if correct_answer not in doc['choices']:\n                correct_answer = \"None of the above\"\n            \n            doc['answer'] = doc['choices'].index(correct_answer)\n        return doc\n        \n    return dataset.map(process_doc)\n",
      "doc_to_text": "{{question.strip()}}\nA. {{choices[0]}}\nB. {{choices[1]}}\nC. {{choices[2]}}\nD. {{choices[3]}}\nAnswer:",
      "doc_to_target": "answer",
      "doc_to_choice": [
        "A",
        "B",
        "C",
        "D"
      ],
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "fewshot_config": {
        "sampler": "first_n"
      },
      "num_fewshot": 3,
      "metric_list": [
        {
          "metric": "acc",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "multiple_choice",
      "repeats": 1,
      "should_decontaminate": false,
      "metadata": {
        "version": 1.0
      }
    },
    "mmlu_redux_machine_learning": {
      "task": "mmlu_redux_machine_learning",
      "task_alias": "machine_learning",
      "dataset_path": "edinburgh-dawg/mmlu-redux",
      "dataset_name": "machine_learning",
      "dataset_kwargs": {
        "trust_remote_code": true
      },
      "test_split": "test",
      "fewshot_split": "test",
      "process_docs": "def preprocessing(dataset):\n    \n    def process_doc(doc):\n        \n        original_doc = copy.copy(doc)\n        if can_be_flipped(doc['question']):\n            # randomly select an answer to hide:\n            answer_to_hide = random.choice(doc['choices'])        \n            doc['choices'].remove(answer_to_hide)\n            doc['choices'].append(\"None of the above\")\n            correct_answer = original_doc['choices'][original_doc['answer']]\n            if correct_answer not in doc['choices']:\n                correct_answer = \"None of the above\"\n            \n            doc['answer'] = doc['choices'].index(correct_answer)\n        return doc\n        \n    return dataset.map(process_doc)\n",
      "doc_to_text": "{{question.strip()}}\nA. {{choices[0]}}\nB. {{choices[1]}}\nC. {{choices[2]}}\nD. {{choices[3]}}\nAnswer:",
      "doc_to_target": "answer",
      "doc_to_choice": [
        "A",
        "B",
        "C",
        "D"
      ],
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "fewshot_config": {
        "sampler": "first_n"
      },
      "num_fewshot": 3,
      "metric_list": [
        {
          "metric": "acc",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "multiple_choice",
      "repeats": 1,
      "should_decontaminate": false,
      "metadata": {
        "version": 1.0
      }
    },
    "mmlu_redux_miscellaneous": {
      "task": "mmlu_redux_miscellaneous",
      "task_alias": "miscellaneous",
      "dataset_path": "edinburgh-dawg/mmlu-redux",
      "dataset_name": "miscellaneous",
      "dataset_kwargs": {
        "trust_remote_code": true
      },
      "test_split": "test",
      "fewshot_split": "test",
      "process_docs": "def preprocessing(dataset):\n    \n    def process_doc(doc):\n        \n        original_doc = copy.copy(doc)\n        if can_be_flipped(doc['question']):\n            # randomly select an answer to hide:\n            answer_to_hide = random.choice(doc['choices'])        \n            doc['choices'].remove(answer_to_hide)\n            doc['choices'].append(\"None of the above\")\n            correct_answer = original_doc['choices'][original_doc['answer']]\n            if correct_answer not in doc['choices']:\n                correct_answer = \"None of the above\"\n            \n            doc['answer'] = doc['choices'].index(correct_answer)\n        return doc\n        \n    return dataset.map(process_doc)\n",
      "doc_to_text": "{{question.strip()}}\nA. {{choices[0]}}\nB. {{choices[1]}}\nC. {{choices[2]}}\nD. {{choices[3]}}\nAnswer:",
      "doc_to_target": "answer",
      "doc_to_choice": [
        "A",
        "B",
        "C",
        "D"
      ],
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "fewshot_config": {
        "sampler": "first_n"
      },
      "num_fewshot": 3,
      "metric_list": [
        {
          "metric": "acc",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "multiple_choice",
      "repeats": 1,
      "should_decontaminate": false,
      "metadata": {
        "version": 1.0
      }
    },
    "mmlu_redux_philosophy": {
      "task": "mmlu_redux_philosophy",
      "task_alias": "philosophy",
      "dataset_path": "edinburgh-dawg/mmlu-redux",
      "dataset_name": "philosophy",
      "dataset_kwargs": {
        "trust_remote_code": true
      },
      "test_split": "test",
      "fewshot_split": "test",
      "process_docs": "def preprocessing(dataset):\n    \n    def process_doc(doc):\n        \n        original_doc = copy.copy(doc)\n        if can_be_flipped(doc['question']):\n            # randomly select an answer to hide:\n            answer_to_hide = random.choice(doc['choices'])        \n            doc['choices'].remove(answer_to_hide)\n            doc['choices'].append(\"None of the above\")\n            correct_answer = original_doc['choices'][original_doc['answer']]\n            if correct_answer not in doc['choices']:\n                correct_answer = \"None of the above\"\n            \n            doc['answer'] = doc['choices'].index(correct_answer)\n        return doc\n        \n    return dataset.map(process_doc)\n",
      "doc_to_text": "{{question.strip()}}\nA. {{choices[0]}}\nB. {{choices[1]}}\nC. {{choices[2]}}\nD. {{choices[3]}}\nAnswer:",
      "doc_to_target": "answer",
      "doc_to_choice": [
        "A",
        "B",
        "C",
        "D"
      ],
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "fewshot_config": {
        "sampler": "first_n"
      },
      "num_fewshot": 3,
      "metric_list": [
        {
          "metric": "acc",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "multiple_choice",
      "repeats": 1,
      "should_decontaminate": false,
      "metadata": {
        "version": 1.0
      }
    },
    "mmlu_redux_professional_accounting": {
      "task": "mmlu_redux_professional_accounting",
      "task_alias": "professional_accounting",
      "dataset_path": "edinburgh-dawg/mmlu-redux",
      "dataset_name": "professional_accounting",
      "dataset_kwargs": {
        "trust_remote_code": true
      },
      "test_split": "test",
      "fewshot_split": "test",
      "process_docs": "def preprocessing(dataset):\n    \n    def process_doc(doc):\n        \n        original_doc = copy.copy(doc)\n        if can_be_flipped(doc['question']):\n            # randomly select an answer to hide:\n            answer_to_hide = random.choice(doc['choices'])        \n            doc['choices'].remove(answer_to_hide)\n            doc['choices'].append(\"None of the above\")\n            correct_answer = original_doc['choices'][original_doc['answer']]\n            if correct_answer not in doc['choices']:\n                correct_answer = \"None of the above\"\n            \n            doc['answer'] = doc['choices'].index(correct_answer)\n        return doc\n        \n    return dataset.map(process_doc)\n",
      "doc_to_text": "{{question.strip()}}\nA. {{choices[0]}}\nB. {{choices[1]}}\nC. {{choices[2]}}\nD. {{choices[3]}}\nAnswer:",
      "doc_to_target": "answer",
      "doc_to_choice": [
        "A",
        "B",
        "C",
        "D"
      ],
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "fewshot_config": {
        "sampler": "first_n"
      },
      "num_fewshot": 3,
      "metric_list": [
        {
          "metric": "acc",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "multiple_choice",
      "repeats": 1,
      "should_decontaminate": false,
      "metadata": {
        "version": 1.0
      }
    },
    "mmlu_redux_professional_law": {
      "task": "mmlu_redux_professional_law",
      "task_alias": "professional_law",
      "dataset_path": "edinburgh-dawg/mmlu-redux",
      "dataset_name": "professional_law",
      "dataset_kwargs": {
        "trust_remote_code": true
      },
      "test_split": "test",
      "fewshot_split": "test",
      "process_docs": "def preprocessing(dataset):\n    \n    def process_doc(doc):\n        \n        original_doc = copy.copy(doc)\n        if can_be_flipped(doc['question']):\n            # randomly select an answer to hide:\n            answer_to_hide = random.choice(doc['choices'])        \n            doc['choices'].remove(answer_to_hide)\n            doc['choices'].append(\"None of the above\")\n            correct_answer = original_doc['choices'][original_doc['answer']]\n            if correct_answer not in doc['choices']:\n                correct_answer = \"None of the above\"\n            \n            doc['answer'] = doc['choices'].index(correct_answer)\n        return doc\n        \n    return dataset.map(process_doc)\n",
      "doc_to_text": "{{question.strip()}}\nA. {{choices[0]}}\nB. {{choices[1]}}\nC. {{choices[2]}}\nD. {{choices[3]}}\nAnswer:",
      "doc_to_target": "answer",
      "doc_to_choice": [
        "A",
        "B",
        "C",
        "D"
      ],
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "fewshot_config": {
        "sampler": "first_n"
      },
      "num_fewshot": 3,
      "metric_list": [
        {
          "metric": "acc",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "multiple_choice",
      "repeats": 1,
      "should_decontaminate": false,
      "metadata": {
        "version": 1.0
      }
    },
    "mmlu_redux_public_relations": {
      "task": "mmlu_redux_public_relations",
      "task_alias": "public_relations",
      "dataset_path": "edinburgh-dawg/mmlu-redux",
      "dataset_name": "public_relations",
      "dataset_kwargs": {
        "trust_remote_code": true
      },
      "test_split": "test",
      "fewshot_split": "test",
      "process_docs": "def preprocessing(dataset):\n    \n    def process_doc(doc):\n        \n        original_doc = copy.copy(doc)\n        if can_be_flipped(doc['question']):\n            # randomly select an answer to hide:\n            answer_to_hide = random.choice(doc['choices'])        \n            doc['choices'].remove(answer_to_hide)\n            doc['choices'].append(\"None of the above\")\n            correct_answer = original_doc['choices'][original_doc['answer']]\n            if correct_answer not in doc['choices']:\n                correct_answer = \"None of the above\"\n            \n            doc['answer'] = doc['choices'].index(correct_answer)\n        return doc\n        \n    return dataset.map(process_doc)\n",
      "doc_to_text": "{{question.strip()}}\nA. {{choices[0]}}\nB. {{choices[1]}}\nC. {{choices[2]}}\nD. {{choices[3]}}\nAnswer:",
      "doc_to_target": "answer",
      "doc_to_choice": [
        "A",
        "B",
        "C",
        "D"
      ],
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "fewshot_config": {
        "sampler": "first_n"
      },
      "num_fewshot": 3,
      "metric_list": [
        {
          "metric": "acc",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "multiple_choice",
      "repeats": 1,
      "should_decontaminate": false,
      "metadata": {
        "version": 1.0
      }
    },
    "mmlu_redux_virology": {
      "task": "mmlu_redux_virology",
      "task_alias": "virology",
      "dataset_path": "edinburgh-dawg/mmlu-redux",
      "dataset_name": "virology",
      "dataset_kwargs": {
        "trust_remote_code": true
      },
      "test_split": "test",
      "fewshot_split": "test",
      "process_docs": "def preprocessing(dataset):\n    \n    def process_doc(doc):\n        \n        original_doc = copy.copy(doc)\n        if can_be_flipped(doc['question']):\n            # randomly select an answer to hide:\n            answer_to_hide = random.choice(doc['choices'])        \n            doc['choices'].remove(answer_to_hide)\n            doc['choices'].append(\"None of the above\")\n            correct_answer = original_doc['choices'][original_doc['answer']]\n            if correct_answer not in doc['choices']:\n                correct_answer = \"None of the above\"\n            \n            doc['answer'] = doc['choices'].index(correct_answer)\n        return doc\n        \n    return dataset.map(process_doc)\n",
      "doc_to_text": "{{question.strip()}}\nA. {{choices[0]}}\nB. {{choices[1]}}\nC. {{choices[2]}}\nD. {{choices[3]}}\nAnswer:",
      "doc_to_target": "answer",
      "doc_to_choice": [
        "A",
        "B",
        "C",
        "D"
      ],
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "fewshot_config": {
        "sampler": "first_n"
      },
      "num_fewshot": 3,
      "metric_list": [
        {
          "metric": "acc",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "multiple_choice",
      "repeats": 1,
      "should_decontaminate": false,
      "metadata": {
        "version": 1.0
      }
    }
  },
  "versions": {
    "mmlu_redux": 2.0,
    "mmlu_redux_anatomy": 1.0,
    "mmlu_redux_astronomy": 1.0,
    "mmlu_redux_business_ethics": 1.0,
    "mmlu_redux_clinical_knowledge": 1.0,
    "mmlu_redux_college_chemistry": 1.0,
    "mmlu_redux_college_computer_science": 1.0,
    "mmlu_redux_college_mathematics": 1.0,
    "mmlu_redux_college_medicine": 1.0,
    "mmlu_redux_college_physics": 1.0,
    "mmlu_redux_conceptual_physics": 1.0,
    "mmlu_redux_econometrics": 1.0,
    "mmlu_redux_electrical_engineering": 1.0,
    "mmlu_redux_formal_logic": 1.0,
    "mmlu_redux_global_facts": 1.0,
    "mmlu_redux_high_school_chemistry": 1.0,
    "mmlu_redux_high_school_geography": 1.0,
    "mmlu_redux_high_school_macroeconomics": 1.0,
    "mmlu_redux_high_school_mathematics": 1.0,
    "mmlu_redux_high_school_physics": 1.0,
    "mmlu_redux_high_school_statistics": 1.0,
    "mmlu_redux_high_school_us_history": 1.0,
    "mmlu_redux_human_aging": 1.0,
    "mmlu_redux_logical_fallacies": 1.0,
    "mmlu_redux_machine_learning": 1.0,
    "mmlu_redux_miscellaneous": 1.0,
    "mmlu_redux_philosophy": 1.0,
    "mmlu_redux_professional_accounting": 1.0,
    "mmlu_redux_professional_law": 1.0,
    "mmlu_redux_public_relations": 1.0,
    "mmlu_redux_virology": 1.0
  },
  "n-shot": {
    "mmlu_redux_anatomy": 3,
    "mmlu_redux_astronomy": 3,
    "mmlu_redux_business_ethics": 3,
    "mmlu_redux_clinical_knowledge": 3,
    "mmlu_redux_college_chemistry": 3,
    "mmlu_redux_college_computer_science": 3,
    "mmlu_redux_college_mathematics": 3,
    "mmlu_redux_college_medicine": 3,
    "mmlu_redux_college_physics": 3,
    "mmlu_redux_conceptual_physics": 3,
    "mmlu_redux_econometrics": 3,
    "mmlu_redux_electrical_engineering": 3,
    "mmlu_redux_formal_logic": 3,
    "mmlu_redux_global_facts": 3,
    "mmlu_redux_high_school_chemistry": 3,
    "mmlu_redux_high_school_geography": 3,
    "mmlu_redux_high_school_macroeconomics": 3,
    "mmlu_redux_high_school_mathematics": 3,
    "mmlu_redux_high_school_physics": 3,
    "mmlu_redux_high_school_statistics": 3,
    "mmlu_redux_high_school_us_history": 3,
    "mmlu_redux_human_aging": 3,
    "mmlu_redux_logical_fallacies": 3,
    "mmlu_redux_machine_learning": 3,
    "mmlu_redux_miscellaneous": 3,
    "mmlu_redux_philosophy": 3,
    "mmlu_redux_professional_accounting": 3,
    "mmlu_redux_professional_law": 3,
    "mmlu_redux_public_relations": 3,
    "mmlu_redux_virology": 3
  },
  "higher_is_better": {
    "mmlu_redux": {
      "acc": true
    },
    "mmlu_redux_anatomy": {
      "acc": true
    },
    "mmlu_redux_astronomy": {
      "acc": true
    },
    "mmlu_redux_business_ethics": {
      "acc": true
    },
    "mmlu_redux_clinical_knowledge": {
      "acc": true
    },
    "mmlu_redux_college_chemistry": {
      "acc": true
    },
    "mmlu_redux_college_computer_science": {
      "acc": true
    },
    "mmlu_redux_college_mathematics": {
      "acc": true
    },
    "mmlu_redux_college_medicine": {
      "acc": true
    },
    "mmlu_redux_college_physics": {
      "acc": true
    },
    "mmlu_redux_conceptual_physics": {
      "acc": true
    },
    "mmlu_redux_econometrics": {
      "acc": true
    },
    "mmlu_redux_electrical_engineering": {
      "acc": true
    },
    "mmlu_redux_formal_logic": {
      "acc": true
    },
    "mmlu_redux_global_facts": {
      "acc": true
    },
    "mmlu_redux_high_school_chemistry": {
      "acc": true
    },
    "mmlu_redux_high_school_geography": {
      "acc": true
    },
    "mmlu_redux_high_school_macroeconomics": {
      "acc": true
    },
    "mmlu_redux_high_school_mathematics": {
      "acc": true
    },
    "mmlu_redux_high_school_physics": {
      "acc": true
    },
    "mmlu_redux_high_school_statistics": {
      "acc": true
    },
    "mmlu_redux_high_school_us_history": {
      "acc": true
    },
    "mmlu_redux_human_aging": {
      "acc": true
    },
    "mmlu_redux_logical_fallacies": {
      "acc": true
    },
    "mmlu_redux_machine_learning": {
      "acc": true
    },
    "mmlu_redux_miscellaneous": {
      "acc": true
    },
    "mmlu_redux_philosophy": {
      "acc": true
    },
    "mmlu_redux_professional_accounting": {
      "acc": true
    },
    "mmlu_redux_professional_law": {
      "acc": true
    },
    "mmlu_redux_public_relations": {
      "acc": true
    },
    "mmlu_redux_virology": {
      "acc": true
    }
  },
  "n-samples": {
    "mmlu_redux_machine_learning": {
      "original": 100,
      "effective": 100
    },
    "mmlu_redux_professional_law": {
      "original": 100,
      "effective": 100
    },
    "mmlu_redux_logical_fallacies": {
      "original": 100,
      "effective": 100
    },
    "mmlu_redux_high_school_macroeconomics": {
      "original": 100,
      "effective": 100
    },
    "mmlu_redux_conceptual_physics": {
      "original": 100,
      "effective": 100
    },
    "mmlu_redux_human_aging": {
      "original": 100,
      "effective": 100
    },
    "mmlu_redux_philosophy": {
      "original": 100,
      "effective": 100
    },
    "mmlu_redux_virology": {
      "original": 100,
      "effective": 100
    },
    "mmlu_redux_clinical_knowledge": {
      "original": 100,
      "effective": 100
    },
    "mmlu_redux_college_chemistry": {
      "original": 100,
      "effective": 100
    },
    "mmlu_redux_astronomy": {
      "original": 100,
      "effective": 100
    },
    "mmlu_redux_public_relations": {
      "original": 100,
      "effective": 100
    },
    "mmlu_redux_miscellaneous": {
      "original": 100,
      "effective": 100
    },
    "mmlu_redux_college_medicine": {
      "original": 100,
      "effective": 100
    },
    "mmlu_redux_high_school_mathematics": {
      "original": 100,
      "effective": 100
    },
    "mmlu_redux_high_school_physics": {
      "original": 100,
      "effective": 100
    },
    "mmlu_redux_anatomy": {
      "original": 100,
      "effective": 100
    },
    "mmlu_redux_global_facts": {
      "original": 100,
      "effective": 100
    },
    "mmlu_redux_high_school_statistics": {
      "original": 100,
      "effective": 100
    },
    "mmlu_redux_high_school_us_history": {
      "original": 100,
      "effective": 100
    },
    "mmlu_redux_high_school_chemistry": {
      "original": 100,
      "effective": 100
    },
    "mmlu_redux_college_computer_science": {
      "original": 100,
      "effective": 100
    },
    "mmlu_redux_econometrics": {
      "original": 100,
      "effective": 100
    },
    "mmlu_redux_high_school_geography": {
      "original": 100,
      "effective": 100
    },
    "mmlu_redux_professional_accounting": {
      "original": 100,
      "effective": 100
    },
    "mmlu_redux_business_ethics": {
      "original": 100,
      "effective": 100
    },
    "mmlu_redux_formal_logic": {
      "original": 100,
      "effective": 100
    },
    "mmlu_redux_college_mathematics": {
      "original": 100,
      "effective": 100
    },
    "mmlu_redux_electrical_engineering": {
      "original": 100,
      "effective": 100
    },
    "mmlu_redux_college_physics": {
      "original": 100,
      "effective": 100
    }
  },
  "config": {
    "model": "hf",
    "model_args": "pretrained=Qwen/Qwen2.5-7B,parallelize=True,attn_implementation=sdpa",
    "model_num_parameters": 7615616512,
    "model_dtype": "torch.bfloat16",
    "model_revision": "main",
    "model_sha": "d149729398750b98c0af14eb82c78cfe92750796",
    "batch_size": 1,
    "batch_sizes": [],
    "device": "cuda",
    "use_cache": null,
    "limit": null,
    "bootstrap_iters": 100000,
    "gen_kwargs": null,
    "random_seed": 0,
    "numpy_seed": 1234,
    "torch_seed": 1234,
    "fewshot_seed": 1234
  },
  "git_hash": null,
  "date": 1735036394.2241833,
  "pretty_env_info": "PyTorch version: 2.5.1+cu124\nIs debug build: False\nCUDA used to build PyTorch: 12.4\nROCM used to build PyTorch: N/A\n\nOS: Rocky Linux 8.4 (Green Obsidian) (x86_64)\nGCC version: (GCC) 8.5.0 20210514 (Red Hat 8.5.0-4)\nClang version: Could not collect\nCMake version: version 3.26.5\nLibc version: glibc-2.28\n\nPython version: 3.11.7 (main, Dec 15 2023, 18:12:31) [GCC 11.2.0] (64-bit runtime)\nPython platform: Linux-4.18.0-305.19.1.el8_4.x86_64-x86_64-with-glibc2.28\nIs CUDA available: True\nCUDA runtime version: Could not collect\nCUDA_MODULE_LOADING set to: LAZY\nGPU models and configuration: \nGPU 0: NVIDIA A100-SXM4-80GB\nGPU 1: NVIDIA A100-SXM4-80GB\nGPU 2: NVIDIA A100-SXM4-80GB\nGPU 3: NVIDIA A100-SXM4-80GB\nGPU 4: NVIDIA A100-SXM4-80GB\nGPU 5: NVIDIA A100-SXM4-80GB\nGPU 6: NVIDIA A100-SXM4-80GB\nGPU 7: NVIDIA A100-SXM4-80GB\n\nNvidia driver version: 545.23.06\ncuDNN version: Probably one of the following:\n/usr/local/cuda-11.3/targets/x86_64-linux/lib/libcudnn.so.8.2.1\n/usr/local/cuda-11.3/targets/x86_64-linux/lib/libcudnn_adv_infer.so.8.2.1\n/usr/local/cuda-11.3/targets/x86_64-linux/lib/libcudnn_adv_train.so.8.2.1\n/usr/local/cuda-11.3/targets/x86_64-linux/lib/libcudnn_cnn_infer.so.8.2.1\n/usr/local/cuda-11.3/targets/x86_64-linux/lib/libcudnn_cnn_train.so.8.2.1\n/usr/local/cuda-11.3/targets/x86_64-linux/lib/libcudnn_ops_infer.so.8.2.1\n/usr/local/cuda-11.3/targets/x86_64-linux/lib/libcudnn_ops_train.so.8.2.1\nHIP runtime version: N/A\nMIOpen runtime version: N/A\nIs XNNPACK available: True\n\nCPU:\nArchitecture:        x86_64\nCPU op-mode(s):      32-bit, 64-bit\nByte Order:          Little Endian\nCPU(s):              128\nOn-line CPU(s) list: 0-127\nThread(s) per core:  2\nCore(s) per socket:  32\nSocket(s):           2\nNUMA node(s):        2\nVendor ID:           AuthenticAMD\nCPU family:          25\nModel:               1\nModel name:          AMD EPYC 7513 32-Core Processor\nStepping:            1\nCPU MHz:             3508.748\nCPU max MHz:         2600.0000\nCPU min MHz:         1500.0000\nBogoMIPS:            5190.14\nVirtualization:      AMD-V\nL1d cache:           32K\nL1i cache:           32K\nL2 cache:            512K\nL3 cache:            32768K\nNUMA node0 CPU(s):   0-31,64-95\nNUMA node1 CPU(s):   32-63,96-127\nFlags:               fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush mmx fxsr sse sse2 ht syscall nx mmxext fxsr_opt pdpe1gb rdtscp lm constant_tsc rep_good nopl nonstop_tsc cpuid extd_apicid aperfmperf pni pclmulqdq monitor ssse3 fma cx16 pcid sse4_1 sse4_2 movbe popcnt aes xsave avx f16c rdrand lahf_lm cmp_legacy svm extapic cr8_legacy abm sse4a misalignsse 3dnowprefetch osvw ibs skinit wdt tce topoext perfctr_core perfctr_nb bpext perfctr_llc mwaitx cpb cat_l3 cdp_l3 invpcid_single hw_pstate sme ssbd mba sev ibrs ibpb stibp vmmcall sev_es fsgsbase bmi1 avx2 smep bmi2 erms invpcid cqm rdt_a rdseed adx smap clflushopt clwb sha_ni xsaveopt xsavec xgetbv1 xsaves cqm_llc cqm_occup_llc cqm_mbm_total cqm_mbm_local clzero irperf xsaveerptr wbnoinvd amd_ppin arat npt lbrv svm_lock nrip_save tsc_scale vmcb_clean flushbyasid decodeassists pausefilter pfthreshold v_vmsave_vmload vgif umip pku ospke vaes vpclmulqdq rdpid overflow_recov succor smca fsrm\n\nVersions of relevant libraries:\n[pip3] numpy==2.1.3\n[pip3] torch==2.5.1\n[pip3] triton==3.1.0\n[conda] _anaconda_depends         2024.02             py311_mkl_1  \n[conda] blas                      1.0                         mkl  \n[conda] mkl                       2023.1.0         h213fc3f_46344  \n[conda] mkl-service               2.4.0           py311h5eee18b_1  \n[conda] mkl_fft                   1.3.8           py311h5eee18b_0  \n[conda] mkl_random                1.2.4           py311hdb19cb5_0  \n[conda] numpy                     1.26.4          py311h08b1b3b_0  \n[conda] numpy-base                1.26.4          py311hf175353_0  \n[conda] numpydoc                  1.5.0           py311h06a4308_0  \n[conda] torch                     2.5.1                    pypi_0    pypi\n[conda] triton                    3.1.0                    pypi_0    pypi",
  "transformers_version": "4.46.2",
  "upper_git_hash": null,
  "tokenizer_pad_token": [
    "<|endoftext|>",
    "151643"
  ],
  "tokenizer_eos_token": [
    "<|endoftext|>",
    "151643"
  ],
  "tokenizer_bos_token": [
    null,
    "None"
  ],
  "eot_token_id": 151643,
  "max_length": 131072,
  "task_hashes": {
    "mmlu_redux_machine_learning": "ee282398ea3290d800c48f751a71ae671bf7cf7852a6c0940a2694b269be31cf",
    "mmlu_redux_professional_law": "0f3c985ef346f4c5bfe2bf1df5ce39e6840f39960d80c5318650938028687d5c",
    "mmlu_redux_logical_fallacies": "1612a2f8f6afdd7c2d3f30334adb14f5a3e59429a796ba14b6f4c315de0052fd",
    "mmlu_redux_high_school_macroeconomics": "bea36d6746d150621d6e619fcb39c0878b0b37def224ec5c05209de1c35b3355",
    "mmlu_redux_conceptual_physics": "5fe52c9225aaaf870bd6e86f6ea87953038168a7797980d9f850126378d12eb6",
    "mmlu_redux_human_aging": "770a999d4b36252f0e21e556424604173955faa6f9c72aa5aab2ab3de4875020",
    "mmlu_redux_philosophy": "e628f2e85ca8402ae935757ea2c08b1c70aed886b73e9e80e5105e255593e0a1",
    "mmlu_redux_virology": "054f9475d63b16642aa55c2dfd6736939d0601562b3214269085e7c2c1ed3f17",
    "mmlu_redux_clinical_knowledge": "e8a9793fd2b2ed0664bf2f6f136410878c5a9b6040cf82470ee7290fd3cc28fa",
    "mmlu_redux_college_chemistry": "7c0a2c6b0d7b3e24d6ef47477d562493aba946016cce7efac1e49c5a6cb1f131",
    "mmlu_redux_astronomy": "a08deb04c7149248893b2dc08f55a71e8e0c54263458c98f25d9b8733ed9eab6",
    "mmlu_redux_public_relations": "e7f2ecb8eaa9ad736f5eb78ebc58d357edadcdcaeb51c98c9435f69443a06060",
    "mmlu_redux_miscellaneous": "14db083dcbdeb57816fb0a67a95d85ebe078039f3c5a3013fa1abd4948c97c49",
    "mmlu_redux_college_medicine": "3e62d5d59e65d967fb868bc71928cd3507527e062d5589790d3d86e9d2a20376",
    "mmlu_redux_high_school_mathematics": "9880bd9c9f4dc6ae2a7e14ad173e7a7bffebbff667f807049e2a174b2e5c5912",
    "mmlu_redux_high_school_physics": "040abfdfa06a1af4f8c5d7a0ef940606ee8767b466e5da832a2451d4532ef9f6",
    "mmlu_redux_anatomy": "046120e79cd37326d6fde93977bf91e9aaee55ec3d0caf7d575470758918e3d7",
    "mmlu_redux_global_facts": "b479aa83656fc4db8e505518d0c9f3bb43e0d15f6ecd6696389ecd4d64398858",
    "mmlu_redux_high_school_statistics": "335cafe70023a36f7e503006f53c9c35fc0b09717030ca788d714605bba236aa",
    "mmlu_redux_high_school_us_history": "f19bc749ad432b5f2b51187a96588006f5e62b878b8808cdaf63b963694d2fe6",
    "mmlu_redux_high_school_chemistry": "bb430bf017ab99a578987bcfbfa4e1d17f876e5d4a3f8b33934cbbb5ea65fa32",
    "mmlu_redux_college_computer_science": "48acac620b4b5dab221bd6cb7b4b5a98e5932462fa43477bb617ecdbd146ff8a",
    "mmlu_redux_econometrics": "a03c885149f9dbbe43080e6536a8099e8eed654be10e6eef8d21950f1ce1c4ae",
    "mmlu_redux_high_school_geography": "17e6673d5f19bac9f1a6f10c256139df3918fd7ae1d96f51a78dd9e5e2d9c874",
    "mmlu_redux_professional_accounting": "3f76e8113680b6b3a5668539a244446329fd422df69760633bf95d2bc5d36a83",
    "mmlu_redux_business_ethics": "5a731c5188ab882718827f175a990b4136fd88a946b8aa8654078bae3bd0c653",
    "mmlu_redux_formal_logic": "d605e1f85d1d7281d75c7cf76276abec5628db34c788a3c2310ffdbcaa8ac614",
    "mmlu_redux_college_mathematics": "0a0d176b7a25ee38852423118c48a3ecd02d2931c88075fd6009f7a92cb9c393",
    "mmlu_redux_electrical_engineering": "5598a3b277492991a6de6cfc992d2db0bd140df525f8189984f809f8671d02e9",
    "mmlu_redux_college_physics": "b7378e2220b5142995615e3375a52f58fe86ecaf5c3c97ce2f2fba547f3b8a37"
  },
  "model_source": "hf",
  "model_name": "Qwen/Qwen2.5-7B",
  "model_name_sanitized": "Qwen__Qwen2.5-7B",
  "system_instruction": null,
  "system_instruction_sha": null,
  "fewshot_as_multiturn": false,
  "chat_template": null,
  "chat_template_sha": null,
  "start_time": 10882890.175907359,
  "end_time": 10884614.831799988,
  "total_evaluation_time_seconds": "1724.6558926291764"
}