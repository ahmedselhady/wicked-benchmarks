{
  "results": {
    "mmlu_pro": {
      "alias": "mmlu_pro"
    },
    "mmlu_pro_biology": {
      "alias": " - biology",
      "acc,none": 0.7405857740585774,
      "acc_stderr,none": 0.0163805343890972
    },
    "mmlu_pro_business": {
      "alias": " - business",
      "acc,none": 0.30544993662864384,
      "acc_stderr,none": 0.016408114899991364
    },
    "mmlu_pro_chemistry": {
      "alias": " - chemistry",
      "acc,none": 0.2879858657243816,
      "acc_stderr,none": 0.013464759218788298
    },
    "mmlu_pro_computer_science": {
      "alias": " - computer_science",
      "acc,none": 0.43414634146341463,
      "acc_stderr,none": 0.024508034492048518
    },
    "mmlu_pro_economics": {
      "alias": " - economics",
      "acc,none": 0.5995260663507109,
      "acc_stderr,none": 0.01687630534881018
    },
    "mmlu_pro_engineering": {
      "alias": " - engineering",
      "acc,none": 0.35810113519091846,
      "acc_stderr,none": 0.015409852225959988
    },
    "mmlu_pro_health": {
      "alias": " - health",
      "acc,none": 0.539119804400978,
      "acc_stderr,none": 0.01743916303813878
    },
    "mmlu_pro_history": {
      "alias": " - history",
      "acc,none": 0.5223097112860893,
      "acc_stderr,none": 0.025623913418931027
    },
    "mmlu_pro_law": {
      "alias": " - law",
      "acc,none": 0.36693914623069934,
      "acc_stderr,none": 0.014531933775910262
    },
    "mmlu_pro_math": {
      "alias": " - math",
      "acc,none": 0.29163582531458176,
      "acc_stderr,none": 0.012370345984791687
    },
    "mmlu_pro_other": {
      "alias": " - other",
      "acc,none": 0.48268398268398266,
      "acc_stderr,none": 0.01644782800534797
    },
    "mmlu_pro_philosophy": {
      "alias": " - philosophy",
      "acc,none": 0.48296593186372744,
      "acc_stderr,none": 0.02239252961538206
    },
    "mmlu_pro_physics": {
      "alias": " - physics",
      "acc,none": 0.30484988452655887,
      "acc_stderr,none": 0.012777472967373938
    },
    "mmlu_pro_psychology": {
      "alias": " - psychology",
      "acc,none": 0.650375939849624,
      "acc_stderr,none": 0.016890936471930816
    }
  },
  "groups": {
    "mmlu_pro": {
      "alias": "mmlu_pro"
    }
  },
  "group_subtasks": {
    "mmlu_pro": [
      "mmlu_pro_biology",
      "mmlu_pro_business",
      "mmlu_pro_chemistry",
      "mmlu_pro_computer_science",
      "mmlu_pro_economics",
      "mmlu_pro_engineering",
      "mmlu_pro_health",
      "mmlu_pro_history",
      "mmlu_pro_law",
      "mmlu_pro_math",
      "mmlu_pro_other",
      "mmlu_pro_philosophy",
      "mmlu_pro_physics",
      "mmlu_pro_psychology"
    ]
  },
  "configs": {
    "mmlu_pro_biology": {
      "task": "mmlu_pro_biology",
      "task_alias": "biology",
      "dataset_path": "TIGER-Lab/MMLU-Pro",
      "test_split": "test",
      "fewshot_split": "validation",
      "process_docs": "functools.partial(<function process_docs at 0x7fd8944f22a0>, subject='biology')",
      "doc_to_text": "def doc2text_mc(doc):\n    \n    prompt = f\"Question: {doc['question']}\\n\"\n    options = doc[\"options\"]\n    \n    char_idx = 0\n    for i, opt in enumerate(options):\n    \n        if opt != \"N/A\":\n            prompt += \"{}. {}\\n\".format(choices[char_idx], opt)\n            char_idx += 1\n    \n    prompt +=\"Answer:\"\n    return prompt\n",
      "doc_to_target": "def doc2tgt(doc):\n    return doc['answer_index']\n",
      "doc_to_choice": "def doc2choice(doc):\n    return alphabets[: len(doc[\"options\"])]\n",
      "description": "The following are multiple choice questions (with answers) about biology. Think step by step and then finish your answer with \"the answer is (X)\" where X is the correct letter choice.\n",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "fewshot_config": {
        "sampler": "first_n"
      },
      "num_fewshot": 5,
      "metric_list": [
        {
          "metric": "acc",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "multiple_choice",
      "repeats": 1,
      "should_decontaminate": false,
      "metadata": {
        "version": 1.0
      }
    },
    "mmlu_pro_business": {
      "task": "mmlu_pro_business",
      "task_alias": "business",
      "dataset_path": "TIGER-Lab/MMLU-Pro",
      "test_split": "test",
      "fewshot_split": "validation",
      "process_docs": "functools.partial(<function process_docs at 0x7fd8964077e0>, subject='business')",
      "doc_to_text": "def doc2text_mc(doc):\n    \n    prompt = f\"Question: {doc['question']}\\n\"\n    options = doc[\"options\"]\n    \n    char_idx = 0\n    for i, opt in enumerate(options):\n    \n        if opt != \"N/A\":\n            prompt += \"{}. {}\\n\".format(choices[char_idx], opt)\n            char_idx += 1\n    \n    prompt +=\"Answer:\"\n    return prompt\n",
      "doc_to_target": "def doc2tgt(doc):\n    return doc['answer_index']\n",
      "doc_to_choice": "def doc2choice(doc):\n    return alphabets[: len(doc[\"options\"])]\n",
      "description": "The following are multiple choice questions (with answers) about business. Think step by step and then finish your answer with \"the answer is (X)\" where X is the correct letter choice.\n",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "fewshot_config": {
        "sampler": "first_n"
      },
      "num_fewshot": 5,
      "metric_list": [
        {
          "metric": "acc",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "multiple_choice",
      "repeats": 1,
      "should_decontaminate": false,
      "metadata": {
        "version": 1.0
      }
    },
    "mmlu_pro_chemistry": {
      "task": "mmlu_pro_chemistry",
      "task_alias": "chemistry",
      "dataset_path": "TIGER-Lab/MMLU-Pro",
      "test_split": "test",
      "fewshot_split": "validation",
      "process_docs": "functools.partial(<function process_docs at 0x7fd896406d40>, subject='chemistry')",
      "doc_to_text": "def doc2text_mc(doc):\n    \n    prompt = f\"Question: {doc['question']}\\n\"\n    options = doc[\"options\"]\n    \n    char_idx = 0\n    for i, opt in enumerate(options):\n    \n        if opt != \"N/A\":\n            prompt += \"{}. {}\\n\".format(choices[char_idx], opt)\n            char_idx += 1\n    \n    prompt +=\"Answer:\"\n    return prompt\n",
      "doc_to_target": "def doc2tgt(doc):\n    return doc['answer_index']\n",
      "doc_to_choice": "def doc2choice(doc):\n    return alphabets[: len(doc[\"options\"])]\n",
      "description": "The following are multiple choice questions (with answers) about chemistry. Think step by step and then finish your answer with \"the answer is (X)\" where X is the correct letter choice.\n",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "fewshot_config": {
        "sampler": "first_n"
      },
      "num_fewshot": 5,
      "metric_list": [
        {
          "metric": "acc",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "multiple_choice",
      "repeats": 1,
      "should_decontaminate": false,
      "metadata": {
        "version": 1.0
      }
    },
    "mmlu_pro_computer_science": {
      "task": "mmlu_pro_computer_science",
      "task_alias": "computer_science",
      "dataset_path": "TIGER-Lab/MMLU-Pro",
      "test_split": "test",
      "fewshot_split": "validation",
      "process_docs": "functools.partial(<function process_docs at 0x7fd896405260>, subject='computer science')",
      "doc_to_text": "def doc2text_mc(doc):\n    \n    prompt = f\"Question: {doc['question']}\\n\"\n    options = doc[\"options\"]\n    \n    char_idx = 0\n    for i, opt in enumerate(options):\n    \n        if opt != \"N/A\":\n            prompt += \"{}. {}\\n\".format(choices[char_idx], opt)\n            char_idx += 1\n    \n    prompt +=\"Answer:\"\n    return prompt\n",
      "doc_to_target": "def doc2tgt(doc):\n    return doc['answer_index']\n",
      "doc_to_choice": "def doc2choice(doc):\n    return alphabets[: len(doc[\"options\"])]\n",
      "description": "The following are multiple choice questions (with answers) about computer science. Think step by step and then finish your answer with \"the answer is (X)\" where X is the correct letter choice.\n",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "fewshot_config": {
        "sampler": "first_n"
      },
      "num_fewshot": 5,
      "metric_list": [
        {
          "metric": "acc",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "multiple_choice",
      "repeats": 1,
      "should_decontaminate": false,
      "metadata": {
        "version": 1.0
      }
    },
    "mmlu_pro_economics": {
      "task": "mmlu_pro_economics",
      "task_alias": "economics",
      "dataset_path": "TIGER-Lab/MMLU-Pro",
      "test_split": "test",
      "fewshot_split": "validation",
      "process_docs": "functools.partial(<function process_docs at 0x7fd8983f9620>, subject='economics')",
      "doc_to_text": "def doc2text_mc(doc):\n    \n    prompt = f\"Question: {doc['question']}\\n\"\n    options = doc[\"options\"]\n    \n    char_idx = 0\n    for i, opt in enumerate(options):\n    \n        if opt != \"N/A\":\n            prompt += \"{}. {}\\n\".format(choices[char_idx], opt)\n            char_idx += 1\n    \n    prompt +=\"Answer:\"\n    return prompt\n",
      "doc_to_target": "def doc2tgt(doc):\n    return doc['answer_index']\n",
      "doc_to_choice": "def doc2choice(doc):\n    return alphabets[: len(doc[\"options\"])]\n",
      "description": "The following are multiple choice questions (with answers) about economics. Think step by step and then finish your answer with \"the answer is (X)\" where X is the correct letter choice.\n",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "fewshot_config": {
        "sampler": "first_n"
      },
      "num_fewshot": 5,
      "metric_list": [
        {
          "metric": "acc",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "multiple_choice",
      "repeats": 1,
      "should_decontaminate": false,
      "metadata": {
        "version": 1.0
      }
    },
    "mmlu_pro_engineering": {
      "task": "mmlu_pro_engineering",
      "task_alias": "engineering",
      "dataset_path": "TIGER-Lab/MMLU-Pro",
      "test_split": "test",
      "fewshot_split": "validation",
      "process_docs": "functools.partial(<function process_docs at 0x7fd8983fa200>, subject='engineering')",
      "doc_to_text": "def doc2text_mc(doc):\n    \n    prompt = f\"Question: {doc['question']}\\n\"\n    options = doc[\"options\"]\n    \n    char_idx = 0\n    for i, opt in enumerate(options):\n    \n        if opt != \"N/A\":\n            prompt += \"{}. {}\\n\".format(choices[char_idx], opt)\n            char_idx += 1\n    \n    prompt +=\"Answer:\"\n    return prompt\n",
      "doc_to_target": "def doc2tgt(doc):\n    return doc['answer_index']\n",
      "doc_to_choice": "def doc2choice(doc):\n    return alphabets[: len(doc[\"options\"])]\n",
      "description": "The following are multiple choice questions (with answers) about engineering. Think step by step and then finish your answer with \"the answer is (X)\" where X is the correct letter choice.\n",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "fewshot_config": {
        "sampler": "first_n"
      },
      "num_fewshot": 5,
      "metric_list": [
        {
          "metric": "acc",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "multiple_choice",
      "repeats": 1,
      "should_decontaminate": false,
      "metadata": {
        "version": 1.0
      }
    },
    "mmlu_pro_health": {
      "task": "mmlu_pro_health",
      "task_alias": "health",
      "dataset_path": "TIGER-Lab/MMLU-Pro",
      "test_split": "test",
      "fewshot_split": "validation",
      "process_docs": "functools.partial(<function process_docs at 0x7fdb103fbe20>, subject='health')",
      "doc_to_text": "def doc2text_mc(doc):\n    \n    prompt = f\"Question: {doc['question']}\\n\"\n    options = doc[\"options\"]\n    \n    char_idx = 0\n    for i, opt in enumerate(options):\n    \n        if opt != \"N/A\":\n            prompt += \"{}. {}\\n\".format(choices[char_idx], opt)\n            char_idx += 1\n    \n    prompt +=\"Answer:\"\n    return prompt\n",
      "doc_to_target": "def doc2tgt(doc):\n    return doc['answer_index']\n",
      "doc_to_choice": "def doc2choice(doc):\n    return alphabets[: len(doc[\"options\"])]\n",
      "description": "The following are multiple choice questions (with answers) about health. Think step by step and then finish your answer with \"the answer is (X)\" where X is the correct letter choice.\n",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "fewshot_config": {
        "sampler": "first_n"
      },
      "num_fewshot": 5,
      "metric_list": [
        {
          "metric": "acc",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "multiple_choice",
      "repeats": 1,
      "should_decontaminate": false,
      "metadata": {
        "version": 1.0
      }
    },
    "mmlu_pro_history": {
      "task": "mmlu_pro_history",
      "task_alias": "history",
      "dataset_path": "TIGER-Lab/MMLU-Pro",
      "test_split": "test",
      "fewshot_split": "validation",
      "process_docs": "functools.partial(<function process_docs at 0x7fdb103fa2a0>, subject='history')",
      "doc_to_text": "def doc2text_mc(doc):\n    \n    prompt = f\"Question: {doc['question']}\\n\"\n    options = doc[\"options\"]\n    \n    char_idx = 0\n    for i, opt in enumerate(options):\n    \n        if opt != \"N/A\":\n            prompt += \"{}. {}\\n\".format(choices[char_idx], opt)\n            char_idx += 1\n    \n    prompt +=\"Answer:\"\n    return prompt\n",
      "doc_to_target": "def doc2tgt(doc):\n    return doc['answer_index']\n",
      "doc_to_choice": "def doc2choice(doc):\n    return alphabets[: len(doc[\"options\"])]\n",
      "description": "The following are multiple choice questions (with answers) about history. Think step by step and then finish your answer with \"the answer is (X)\" where X is the correct letter choice.\n",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "fewshot_config": {
        "sampler": "first_n"
      },
      "num_fewshot": 5,
      "metric_list": [
        {
          "metric": "acc",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "multiple_choice",
      "repeats": 1,
      "should_decontaminate": false,
      "metadata": {
        "version": 1.0
      }
    },
    "mmlu_pro_law": {
      "task": "mmlu_pro_law",
      "task_alias": "law",
      "dataset_path": "TIGER-Lab/MMLU-Pro",
      "test_split": "test",
      "fewshot_split": "validation",
      "process_docs": "functools.partial(<function process_docs at 0x7fdb103f8d60>, subject='law')",
      "doc_to_text": "def doc2text_mc(doc):\n    \n    prompt = f\"Question: {doc['question']}\\n\"\n    options = doc[\"options\"]\n    \n    char_idx = 0\n    for i, opt in enumerate(options):\n    \n        if opt != \"N/A\":\n            prompt += \"{}. {}\\n\".format(choices[char_idx], opt)\n            char_idx += 1\n    \n    prompt +=\"Answer:\"\n    return prompt\n",
      "doc_to_target": "def doc2tgt(doc):\n    return doc['answer_index']\n",
      "doc_to_choice": "def doc2choice(doc):\n    return alphabets[: len(doc[\"options\"])]\n",
      "description": "The following are multiple choice questions (with answers) about law. Think step by step and then finish your answer with \"the answer is (X)\" where X is the correct letter choice.\n",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "fewshot_config": {
        "sampler": "first_n"
      },
      "num_fewshot": 5,
      "metric_list": [
        {
          "metric": "acc",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "multiple_choice",
      "repeats": 1,
      "should_decontaminate": false,
      "metadata": {
        "version": 1.0
      }
    },
    "mmlu_pro_math": {
      "task": "mmlu_pro_math",
      "task_alias": "math",
      "dataset_path": "TIGER-Lab/MMLU-Pro",
      "test_split": "test",
      "fewshot_split": "validation",
      "process_docs": "functools.partial(<function process_docs at 0x7fdb16259940>, subject='math')",
      "doc_to_text": "def doc2text_mc(doc):\n    \n    prompt = f\"Question: {doc['question']}\\n\"\n    options = doc[\"options\"]\n    \n    char_idx = 0\n    for i, opt in enumerate(options):\n    \n        if opt != \"N/A\":\n            prompt += \"{}. {}\\n\".format(choices[char_idx], opt)\n            char_idx += 1\n    \n    prompt +=\"Answer:\"\n    return prompt\n",
      "doc_to_target": "def doc2tgt(doc):\n    return doc['answer_index']\n",
      "doc_to_choice": "def doc2choice(doc):\n    return alphabets[: len(doc[\"options\"])]\n",
      "description": "The following are multiple choice questions (with answers) about math. Think step by step and then finish your answer with \"the answer is (X)\" where X is the correct letter choice.\n",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "fewshot_config": {
        "sampler": "first_n"
      },
      "num_fewshot": 5,
      "metric_list": [
        {
          "metric": "acc",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "multiple_choice",
      "repeats": 1,
      "should_decontaminate": false,
      "metadata": {
        "version": 1.0
      }
    },
    "mmlu_pro_other": {
      "task": "mmlu_pro_other",
      "task_alias": "other",
      "dataset_path": "TIGER-Lab/MMLU-Pro",
      "test_split": "test",
      "fewshot_split": "validation",
      "process_docs": "functools.partial(<function process_docs at 0x7fdb1625a480>, subject='other')",
      "doc_to_text": "def doc2text_mc(doc):\n    \n    prompt = f\"Question: {doc['question']}\\n\"\n    options = doc[\"options\"]\n    \n    char_idx = 0\n    for i, opt in enumerate(options):\n    \n        if opt != \"N/A\":\n            prompt += \"{}. {}\\n\".format(choices[char_idx], opt)\n            char_idx += 1\n    \n    prompt +=\"Answer:\"\n    return prompt\n",
      "doc_to_target": "def doc2tgt(doc):\n    return doc['answer_index']\n",
      "doc_to_choice": "def doc2choice(doc):\n    return alphabets[: len(doc[\"options\"])]\n",
      "description": "The following are multiple choice questions (with answers) about other. Think step by step and then finish your answer with \"the answer is (X)\" where X is the correct letter choice.\n",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "fewshot_config": {
        "sampler": "first_n"
      },
      "num_fewshot": 5,
      "metric_list": [
        {
          "metric": "acc",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "multiple_choice",
      "repeats": 1,
      "should_decontaminate": false,
      "metadata": {
        "version": 1.0
      }
    },
    "mmlu_pro_philosophy": {
      "task": "mmlu_pro_philosophy",
      "task_alias": "philosophy",
      "dataset_path": "TIGER-Lab/MMLU-Pro",
      "test_split": "test",
      "fewshot_split": "validation",
      "process_docs": "functools.partial(<function process_docs at 0x7fdb16c7dda0>, subject='philosophy')",
      "doc_to_text": "def doc2text_mc(doc):\n    \n    prompt = f\"Question: {doc['question']}\\n\"\n    options = doc[\"options\"]\n    \n    char_idx = 0\n    for i, opt in enumerate(options):\n    \n        if opt != \"N/A\":\n            prompt += \"{}. {}\\n\".format(choices[char_idx], opt)\n            char_idx += 1\n    \n    prompt +=\"Answer:\"\n    return prompt\n",
      "doc_to_target": "def doc2tgt(doc):\n    return doc['answer_index']\n",
      "doc_to_choice": "def doc2choice(doc):\n    return alphabets[: len(doc[\"options\"])]\n",
      "description": "The following are multiple choice questions (with answers) about philosophy. Think step by step and then finish your answer with \"the answer is (X)\" where X is the correct letter choice.\n",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "fewshot_config": {
        "sampler": "first_n"
      },
      "num_fewshot": 5,
      "metric_list": [
        {
          "metric": "acc",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "multiple_choice",
      "repeats": 1,
      "should_decontaminate": false,
      "metadata": {
        "version": 1.0
      }
    },
    "mmlu_pro_physics": {
      "task": "mmlu_pro_physics",
      "task_alias": "physics",
      "dataset_path": "TIGER-Lab/MMLU-Pro",
      "test_split": "test",
      "fewshot_split": "validation",
      "process_docs": "functools.partial(<function process_docs at 0x7fdb16c7f380>, subject='physics')",
      "doc_to_text": "def doc2text_mc(doc):\n    \n    prompt = f\"Question: {doc['question']}\\n\"\n    options = doc[\"options\"]\n    \n    char_idx = 0\n    for i, opt in enumerate(options):\n    \n        if opt != \"N/A\":\n            prompt += \"{}. {}\\n\".format(choices[char_idx], opt)\n            char_idx += 1\n    \n    prompt +=\"Answer:\"\n    return prompt\n",
      "doc_to_target": "def doc2tgt(doc):\n    return doc['answer_index']\n",
      "doc_to_choice": "def doc2choice(doc):\n    return alphabets[: len(doc[\"options\"])]\n",
      "description": "The following are multiple choice questions (with answers) about physics. Think step by step and then finish your answer with \"the answer is (X)\" where X is the correct letter choice.\n",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "fewshot_config": {
        "sampler": "first_n"
      },
      "num_fewshot": 5,
      "metric_list": [
        {
          "metric": "acc",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "multiple_choice",
      "repeats": 1,
      "should_decontaminate": false,
      "metadata": {
        "version": 1.0
      }
    },
    "mmlu_pro_psychology": {
      "task": "mmlu_pro_psychology",
      "task_alias": "psychology",
      "dataset_path": "TIGER-Lab/MMLU-Pro",
      "test_split": "test",
      "fewshot_split": "validation",
      "process_docs": "functools.partial(<function process_docs at 0x7fdb16f39580>, subject='psychology')",
      "doc_to_text": "def doc2text_mc(doc):\n    \n    prompt = f\"Question: {doc['question']}\\n\"\n    options = doc[\"options\"]\n    \n    char_idx = 0\n    for i, opt in enumerate(options):\n    \n        if opt != \"N/A\":\n            prompt += \"{}. {}\\n\".format(choices[char_idx], opt)\n            char_idx += 1\n    \n    prompt +=\"Answer:\"\n    return prompt\n",
      "doc_to_target": "def doc2tgt(doc):\n    return doc['answer_index']\n",
      "doc_to_choice": "def doc2choice(doc):\n    return alphabets[: len(doc[\"options\"])]\n",
      "description": "The following are multiple choice questions (with answers) about psychology. Think step by step and then finish your answer with \"the answer is (X)\" where X is the correct letter choice.\n",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "fewshot_config": {
        "sampler": "first_n"
      },
      "num_fewshot": 5,
      "metric_list": [
        {
          "metric": "acc",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "multiple_choice",
      "repeats": 1,
      "should_decontaminate": false,
      "metadata": {
        "version": 1.0
      }
    }
  },
  "versions": {
    "mmlu_pro": 2.0,
    "mmlu_pro_biology": 1.0,
    "mmlu_pro_business": 1.0,
    "mmlu_pro_chemistry": 1.0,
    "mmlu_pro_computer_science": 1.0,
    "mmlu_pro_economics": 1.0,
    "mmlu_pro_engineering": 1.0,
    "mmlu_pro_health": 1.0,
    "mmlu_pro_history": 1.0,
    "mmlu_pro_law": 1.0,
    "mmlu_pro_math": 1.0,
    "mmlu_pro_other": 1.0,
    "mmlu_pro_philosophy": 1.0,
    "mmlu_pro_physics": 1.0,
    "mmlu_pro_psychology": 1.0
  },
  "n-shot": {
    "mmlu_pro_biology": 5,
    "mmlu_pro_business": 5,
    "mmlu_pro_chemistry": 5,
    "mmlu_pro_computer_science": 5,
    "mmlu_pro_economics": 5,
    "mmlu_pro_engineering": 5,
    "mmlu_pro_health": 5,
    "mmlu_pro_history": 5,
    "mmlu_pro_law": 5,
    "mmlu_pro_math": 5,
    "mmlu_pro_other": 5,
    "mmlu_pro_philosophy": 5,
    "mmlu_pro_physics": 5,
    "mmlu_pro_psychology": 5
  },
  "higher_is_better": {
    "mmlu_pro": {
      "acc": true
    },
    "mmlu_pro_biology": {
      "acc": true
    },
    "mmlu_pro_business": {
      "acc": true
    },
    "mmlu_pro_chemistry": {
      "acc": true
    },
    "mmlu_pro_computer_science": {
      "acc": true
    },
    "mmlu_pro_economics": {
      "acc": true
    },
    "mmlu_pro_engineering": {
      "acc": true
    },
    "mmlu_pro_health": {
      "acc": true
    },
    "mmlu_pro_history": {
      "acc": true
    },
    "mmlu_pro_law": {
      "acc": true
    },
    "mmlu_pro_math": {
      "acc": true
    },
    "mmlu_pro_other": {
      "acc": true
    },
    "mmlu_pro_philosophy": {
      "acc": true
    },
    "mmlu_pro_physics": {
      "acc": true
    },
    "mmlu_pro_psychology": {
      "acc": true
    }
  },
  "n-samples": {
    "mmlu_pro_biology": {
      "original": 717,
      "effective": 717
    },
    "mmlu_pro_business": {
      "original": 789,
      "effective": 789
    },
    "mmlu_pro_chemistry": {
      "original": 1132,
      "effective": 1132
    },
    "mmlu_pro_computer_science": {
      "original": 410,
      "effective": 410
    },
    "mmlu_pro_economics": {
      "original": 844,
      "effective": 844
    },
    "mmlu_pro_engineering": {
      "original": 969,
      "effective": 969
    },
    "mmlu_pro_health": {
      "original": 818,
      "effective": 818
    },
    "mmlu_pro_history": {
      "original": 381,
      "effective": 381
    },
    "mmlu_pro_law": {
      "original": 1101,
      "effective": 1101
    },
    "mmlu_pro_math": {
      "original": 1351,
      "effective": 1351
    },
    "mmlu_pro_other": {
      "original": 924,
      "effective": 924
    },
    "mmlu_pro_philosophy": {
      "original": 499,
      "effective": 499
    },
    "mmlu_pro_physics": {
      "original": 1299,
      "effective": 1299
    },
    "mmlu_pro_psychology": {
      "original": 798,
      "effective": 798
    }
  },
  "config": {
    "model": "hf",
    "model_args": "pretrained=google/gemma-2-9b-it,parallelize=True,attn_implementation=sdpa",
    "model_num_parameters": 9241705984,
    "model_dtype": "torch.bfloat16",
    "model_revision": "main",
    "model_sha": "11c9b309abf73637e4b6f9a3fa1e92e615547819",
    "batch_size": 1,
    "batch_sizes": [],
    "device": "cuda",
    "use_cache": null,
    "limit": null,
    "bootstrap_iters": 100000,
    "gen_kwargs": null,
    "random_seed": 0,
    "numpy_seed": 1234,
    "torch_seed": 1234,
    "fewshot_seed": 1234
  },
  "git_hash": "58e96a4",
  "date": 1737927561.4257424,
  "pretty_env_info": "PyTorch version: 2.5.1+cu124\nIs debug build: False\nCUDA used to build PyTorch: 12.4\nROCM used to build PyTorch: N/A\n\nOS: Rocky Linux 8.4 (Green Obsidian) (x86_64)\nGCC version: (GCC) 8.5.0 20210514 (Red Hat 8.5.0-4)\nClang version: Could not collect\nCMake version: Could not collect\nLibc version: glibc-2.28\n\nPython version: 3.11.7 (main, Dec 15 2023, 18:12:31) [GCC 11.2.0] (64-bit runtime)\nPython platform: Linux-4.18.0-305.19.1.el8_4.x86_64-x86_64-with-glibc2.28\nIs CUDA available: True\nCUDA runtime version: Could not collect\nCUDA_MODULE_LOADING set to: LAZY\nGPU models and configuration: \nGPU 0: NVIDIA A100-SXM4-80GB\nGPU 1: NVIDIA A100-SXM4-80GB\nGPU 2: NVIDIA A100-SXM4-80GB\nGPU 3: NVIDIA A100-SXM4-80GB\n\nNvidia driver version: 535.104.12\ncuDNN version: Probably one of the following:\n/usr/local/cuda-11.3/targets/x86_64-linux/lib/libcudnn.so.8.2.1\n/usr/local/cuda-11.3/targets/x86_64-linux/lib/libcudnn_adv_infer.so.8.2.1\n/usr/local/cuda-11.3/targets/x86_64-linux/lib/libcudnn_adv_train.so.8.2.1\n/usr/local/cuda-11.3/targets/x86_64-linux/lib/libcudnn_cnn_infer.so.8.2.1\n/usr/local/cuda-11.3/targets/x86_64-linux/lib/libcudnn_cnn_train.so.8.2.1\n/usr/local/cuda-11.3/targets/x86_64-linux/lib/libcudnn_ops_infer.so.8.2.1\n/usr/local/cuda-11.3/targets/x86_64-linux/lib/libcudnn_ops_train.so.8.2.1\nHIP runtime version: N/A\nMIOpen runtime version: N/A\nIs XNNPACK available: True\n\nCPU:\nArchitecture:        x86_64\nCPU op-mode(s):      32-bit, 64-bit\nByte Order:          Little Endian\nCPU(s):              128\nOn-line CPU(s) list: 0-127\nThread(s) per core:  2\nCore(s) per socket:  32\nSocket(s):           2\nNUMA node(s):        2\nVendor ID:           AuthenticAMD\nCPU family:          25\nModel:               1\nModel name:          AMD EPYC 7513 32-Core Processor\nStepping:            1\nCPU MHz:             3493.232\nCPU max MHz:         2600.0000\nCPU min MHz:         1500.0000\nBogoMIPS:            5190.38\nVirtualization:      AMD-V\nL1d cache:           32K\nL1i cache:           32K\nL2 cache:            512K\nL3 cache:            32768K\nNUMA node0 CPU(s):   0-31,64-95\nNUMA node1 CPU(s):   32-63,96-127\nFlags:               fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush mmx fxsr sse sse2 ht syscall nx mmxext fxsr_opt pdpe1gb rdtscp lm constant_tsc rep_good nopl nonstop_tsc cpuid extd_apicid aperfmperf pni pclmulqdq monitor ssse3 fma cx16 pcid sse4_1 sse4_2 movbe popcnt aes xsave avx f16c rdrand lahf_lm cmp_legacy svm extapic cr8_legacy abm sse4a misalignsse 3dnowprefetch osvw ibs skinit wdt tce topoext perfctr_core perfctr_nb bpext perfctr_llc mwaitx cpb cat_l3 cdp_l3 invpcid_single hw_pstate sme ssbd mba sev ibrs ibpb stibp vmmcall sev_es fsgsbase bmi1 avx2 smep bmi2 erms invpcid cqm rdt_a rdseed adx smap clflushopt clwb sha_ni xsaveopt xsavec xgetbv1 xsaves cqm_llc cqm_occup_llc cqm_mbm_total cqm_mbm_local clzero irperf xsaveerptr wbnoinvd amd_ppin arat npt lbrv svm_lock nrip_save tsc_scale vmcb_clean flushbyasid decodeassists pausefilter pfthreshold v_vmsave_vmload vgif umip pku ospke vaes vpclmulqdq rdpid overflow_recov succor smca fsrm\n\nVersions of relevant libraries:\n[pip3] numpy==2.1.3\n[pip3] torch==2.5.1\n[pip3] triton==3.1.0\n[conda] numpy                     1.26.4                   pypi_0    pypi\n[conda] optree                    0.11.0                   pypi_0    pypi\n[conda] torch                     2.4.1                    pypi_0    pypi\n[conda] torchvision               0.19.1                   pypi_0    pypi\n[conda] triton                    3.0.0                    pypi_0    pypi",
  "transformers_version": "4.46.2",
  "upper_git_hash": null,
  "tokenizer_pad_token": [
    "<pad>",
    "0"
  ],
  "tokenizer_eos_token": [
    "<eos>",
    "1"
  ],
  "tokenizer_bos_token": [
    "<bos>",
    "2"
  ],
  "eot_token_id": 1,
  "max_length": 8192,
  "task_hashes": {
    "mmlu_pro_biology": "fa18968c7add4aac008a05b5fa2af49edbd753e984a4d78484e2798d1cfe7db6",
    "mmlu_pro_business": "c9a4ffe0ada3a52c27b16672fe5ea4235abc120deb5aafe76cb80a3078ec6238",
    "mmlu_pro_chemistry": "3038daf60f9f27d4f639c1c1d37ad34b4feb877e55e1cbb43514275c6b30d1ee",
    "mmlu_pro_computer_science": "48cd489b41a8830981eca224af1c85781cdfc4c120faab3dd000c25b0a3b60c0",
    "mmlu_pro_economics": "68eac3912ec0b5c04bea97ecd3033fa8380c11a61cae2b76a94d35414a67ef9b",
    "mmlu_pro_engineering": "6fc6a736622281c1c645275ab58650aa63720308ce0a77e9f14a503712fd4a0e",
    "mmlu_pro_health": "fdd39b7c2f82f58f33f332b69a5a65ffa58036e8cb9d59f3eeb86836e519c3be",
    "mmlu_pro_history": "72629556a53387ad9c8cc3fc1b7e6a7238c522ccdcba757587bcbcec22ff9360",
    "mmlu_pro_law": "626cedd1ad261ee39fe000a12763aa7043cb59f516b66f83a4809c50cbeeb562",
    "mmlu_pro_math": "030951d7260ee29ab8e262c51b5fc6bf8025ab2a8b5fae2bd113815e991662a2",
    "mmlu_pro_other": "1dd6f681f138ec6ba2aa9c4eb546601d3dab760ba2642d8c934470b5dfb8a933",
    "mmlu_pro_philosophy": "04cb6428058db861ee0ec752872231231b7a942c87a1633785f269c0e40a5d69",
    "mmlu_pro_physics": "3da4df6ca9a822b27333110c63d698f658cef91f697074cf7cd03f4686bb18b7",
    "mmlu_pro_psychology": "b5bb05a15304ca4f3443ad43e2ce91d79935f18f51d582ec07a275137c0ae777"
  },
  "model_source": "hf",
  "model_name": "google/gemma-2-9b-it",
  "model_name_sanitized": "google__gemma-2-9b-it",
  "system_instruction": null,
  "system_instruction_sha": null,
  "fewshot_as_multiturn": false,
  "chat_template": null,
  "chat_template_sha": null,
  "start_time": 11164629.439616656,
  "end_time": 11169930.048523225,
  "total_evaluation_time_seconds": "5300.608906568959"
}