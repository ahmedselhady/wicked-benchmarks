{
  "results": {
    "mmlu_pro": {
      "alias": "mmlu_pro"
    },
    "mmlu_pro_biology": {
      "alias": " - biology",
      "acc,none": 0.5785634588563459,
      "acc_stderr,none": 0.018390416565322556
    },
    "mmlu_pro_business": {
      "alias": " - business",
      "acc,none": 0.24602027883396705,
      "acc_stderr,none": 0.015547287277856026
    },
    "mmlu_pro_chemistry": {
      "alias": " - chemistry",
      "acc,none": 0.22791519434628976,
      "acc_stderr,none": 0.012473485886521828
    },
    "mmlu_pro_computer_science": {
      "alias": " - computer_science",
      "acc,none": 0.36097560975609755,
      "acc_stderr,none": 0.02374848953721165
    },
    "mmlu_pro_economics": {
      "alias": " - economics",
      "acc,none": 0.4419431279620853,
      "acc_stderr,none": 0.01710443116191488
    },
    "mmlu_pro_engineering": {
      "alias": " - engineering",
      "acc,none": 0.22910216718266255,
      "acc_stderr,none": 0.013507511079119962
    },
    "mmlu_pro_health": {
      "alias": " - health",
      "acc,none": 0.44621026894865523,
      "acc_stderr,none": 0.017391266144447512
    },
    "mmlu_pro_history": {
      "alias": " - history",
      "acc,none": 0.42782152230971127,
      "acc_stderr,none": 0.025380798137584724
    },
    "mmlu_pro_law": {
      "alias": " - law",
      "acc,none": 0.27702089009990916,
      "acc_stderr,none": 0.013493443409440933
    },
    "mmlu_pro_math": {
      "alias": " - math",
      "acc,none": 0.21021465581051074,
      "acc_stderr,none": 0.011089683370324777
    },
    "mmlu_pro_other": {
      "alias": " - other",
      "acc,none": 0.33874458874458874,
      "acc_stderr,none": 0.015578296022934214
    },
    "mmlu_pro_philosophy": {
      "alias": " - philosophy",
      "acc,none": 0.36072144288577157,
      "acc_stderr,none": 0.021518717150601305
    },
    "mmlu_pro_physics": {
      "alias": " - physics",
      "acc,none": 0.23094688221709006,
      "acc_stderr,none": 0.011697602898372853
    },
    "mmlu_pro_psychology": {
      "alias": " - psychology",
      "acc,none": 0.5087719298245614,
      "acc_stderr,none": 0.017708182870812612
    }
  },
  "groups": {
    "mmlu_pro": {
      "alias": "mmlu_pro"
    }
  },
  "group_subtasks": {
    "mmlu_pro": [
      "mmlu_pro_biology",
      "mmlu_pro_business",
      "mmlu_pro_chemistry",
      "mmlu_pro_computer_science",
      "mmlu_pro_economics",
      "mmlu_pro_engineering",
      "mmlu_pro_health",
      "mmlu_pro_history",
      "mmlu_pro_law",
      "mmlu_pro_math",
      "mmlu_pro_other",
      "mmlu_pro_philosophy",
      "mmlu_pro_physics",
      "mmlu_pro_psychology"
    ]
  },
  "configs": {
    "mmlu_pro_biology": {
      "task": "mmlu_pro_biology",
      "task_alias": "biology",
      "dataset_path": "TIGER-Lab/MMLU-Pro",
      "test_split": "test",
      "fewshot_split": "validation",
      "process_docs": "functools.partial(<function process_docs at 0x7fed26974d60>, subject='biology')",
      "doc_to_text": "def doc2text_mc(doc):\n    \n    prompt = f\"Question: {doc['question']}\\n\"\n    options = doc[\"options\"]\n    \n    char_idx = 0\n    for i, opt in enumerate(options):\n    \n        if opt != \"N/A\":\n            prompt += \"{}. {}\\n\".format(choices[char_idx], opt)\n            char_idx += 1\n    \n    prompt +=\"Answer:\"\n    return prompt\n",
      "doc_to_target": "def doc2tgt(doc):\n    return doc['answer_index']\n",
      "doc_to_choice": "def doc2choice(doc):\n    return alphabets[: len(doc[\"options\"])]\n",
      "description": "The following are multiple choice questions (with answers) about biology. Think step by step and then finish your answer with \"the answer is (X)\" where X is the correct letter choice.\n",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "fewshot_config": {
        "sampler": "first_n"
      },
      "num_fewshot": 3,
      "metric_list": [
        {
          "metric": "acc",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "multiple_choice",
      "repeats": 1,
      "should_decontaminate": false,
      "metadata": {
        "version": 1.0
      }
    },
    "mmlu_pro_business": {
      "task": "mmlu_pro_business",
      "task_alias": "business",
      "dataset_path": "TIGER-Lab/MMLU-Pro",
      "test_split": "test",
      "fewshot_split": "validation",
      "process_docs": "functools.partial(<function process_docs at 0x7fed26976e80>, subject='business')",
      "doc_to_text": "def doc2text_mc(doc):\n    \n    prompt = f\"Question: {doc['question']}\\n\"\n    options = doc[\"options\"]\n    \n    char_idx = 0\n    for i, opt in enumerate(options):\n    \n        if opt != \"N/A\":\n            prompt += \"{}. {}\\n\".format(choices[char_idx], opt)\n            char_idx += 1\n    \n    prompt +=\"Answer:\"\n    return prompt\n",
      "doc_to_target": "def doc2tgt(doc):\n    return doc['answer_index']\n",
      "doc_to_choice": "def doc2choice(doc):\n    return alphabets[: len(doc[\"options\"])]\n",
      "description": "The following are multiple choice questions (with answers) about business. Think step by step and then finish your answer with \"the answer is (X)\" where X is the correct letter choice.\n",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "fewshot_config": {
        "sampler": "first_n"
      },
      "num_fewshot": 3,
      "metric_list": [
        {
          "metric": "acc",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "multiple_choice",
      "repeats": 1,
      "should_decontaminate": false,
      "metadata": {
        "version": 1.0
      }
    },
    "mmlu_pro_chemistry": {
      "task": "mmlu_pro_chemistry",
      "task_alias": "chemistry",
      "dataset_path": "TIGER-Lab/MMLU-Pro",
      "test_split": "test",
      "fewshot_split": "validation",
      "process_docs": "functools.partial(<function process_docs at 0x7fed26e15b20>, subject='chemistry')",
      "doc_to_text": "def doc2text_mc(doc):\n    \n    prompt = f\"Question: {doc['question']}\\n\"\n    options = doc[\"options\"]\n    \n    char_idx = 0\n    for i, opt in enumerate(options):\n    \n        if opt != \"N/A\":\n            prompt += \"{}. {}\\n\".format(choices[char_idx], opt)\n            char_idx += 1\n    \n    prompt +=\"Answer:\"\n    return prompt\n",
      "doc_to_target": "def doc2tgt(doc):\n    return doc['answer_index']\n",
      "doc_to_choice": "def doc2choice(doc):\n    return alphabets[: len(doc[\"options\"])]\n",
      "description": "The following are multiple choice questions (with answers) about chemistry. Think step by step and then finish your answer with \"the answer is (X)\" where X is the correct letter choice.\n",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "fewshot_config": {
        "sampler": "first_n"
      },
      "num_fewshot": 3,
      "metric_list": [
        {
          "metric": "acc",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "multiple_choice",
      "repeats": 1,
      "should_decontaminate": false,
      "metadata": {
        "version": 1.0
      }
    },
    "mmlu_pro_computer_science": {
      "task": "mmlu_pro_computer_science",
      "task_alias": "computer_science",
      "dataset_path": "TIGER-Lab/MMLU-Pro",
      "test_split": "test",
      "fewshot_split": "validation",
      "process_docs": "functools.partial(<function process_docs at 0x7fed26e16c00>, subject='computer science')",
      "doc_to_text": "def doc2text_mc(doc):\n    \n    prompt = f\"Question: {doc['question']}\\n\"\n    options = doc[\"options\"]\n    \n    char_idx = 0\n    for i, opt in enumerate(options):\n    \n        if opt != \"N/A\":\n            prompt += \"{}. {}\\n\".format(choices[char_idx], opt)\n            char_idx += 1\n    \n    prompt +=\"Answer:\"\n    return prompt\n",
      "doc_to_target": "def doc2tgt(doc):\n    return doc['answer_index']\n",
      "doc_to_choice": "def doc2choice(doc):\n    return alphabets[: len(doc[\"options\"])]\n",
      "description": "The following are multiple choice questions (with answers) about computer science. Think step by step and then finish your answer with \"the answer is (X)\" where X is the correct letter choice.\n",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "fewshot_config": {
        "sampler": "first_n"
      },
      "num_fewshot": 3,
      "metric_list": [
        {
          "metric": "acc",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "multiple_choice",
      "repeats": 1,
      "should_decontaminate": false,
      "metadata": {
        "version": 1.0
      }
    },
    "mmlu_pro_economics": {
      "task": "mmlu_pro_economics",
      "task_alias": "economics",
      "dataset_path": "TIGER-Lab/MMLU-Pro",
      "test_split": "test",
      "fewshot_split": "validation",
      "process_docs": "functools.partial(<function process_docs at 0x7fed294dd3a0>, subject='economics')",
      "doc_to_text": "def doc2text_mc(doc):\n    \n    prompt = f\"Question: {doc['question']}\\n\"\n    options = doc[\"options\"]\n    \n    char_idx = 0\n    for i, opt in enumerate(options):\n    \n        if opt != \"N/A\":\n            prompt += \"{}. {}\\n\".format(choices[char_idx], opt)\n            char_idx += 1\n    \n    prompt +=\"Answer:\"\n    return prompt\n",
      "doc_to_target": "def doc2tgt(doc):\n    return doc['answer_index']\n",
      "doc_to_choice": "def doc2choice(doc):\n    return alphabets[: len(doc[\"options\"])]\n",
      "description": "The following are multiple choice questions (with answers) about economics. Think step by step and then finish your answer with \"the answer is (X)\" where X is the correct letter choice.\n",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "fewshot_config": {
        "sampler": "first_n"
      },
      "num_fewshot": 3,
      "metric_list": [
        {
          "metric": "acc",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "multiple_choice",
      "repeats": 1,
      "should_decontaminate": false,
      "metadata": {
        "version": 1.0
      }
    },
    "mmlu_pro_engineering": {
      "task": "mmlu_pro_engineering",
      "task_alias": "engineering",
      "dataset_path": "TIGER-Lab/MMLU-Pro",
      "test_split": "test",
      "fewshot_split": "validation",
      "process_docs": "functools.partial(<function process_docs at 0x7fed294dd9e0>, subject='engineering')",
      "doc_to_text": "def doc2text_mc(doc):\n    \n    prompt = f\"Question: {doc['question']}\\n\"\n    options = doc[\"options\"]\n    \n    char_idx = 0\n    for i, opt in enumerate(options):\n    \n        if opt != \"N/A\":\n            prompt += \"{}. {}\\n\".format(choices[char_idx], opt)\n            char_idx += 1\n    \n    prompt +=\"Answer:\"\n    return prompt\n",
      "doc_to_target": "def doc2tgt(doc):\n    return doc['answer_index']\n",
      "doc_to_choice": "def doc2choice(doc):\n    return alphabets[: len(doc[\"options\"])]\n",
      "description": "The following are multiple choice questions (with answers) about engineering. Think step by step and then finish your answer with \"the answer is (X)\" where X is the correct letter choice.\n",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "fewshot_config": {
        "sampler": "first_n"
      },
      "num_fewshot": 3,
      "metric_list": [
        {
          "metric": "acc",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "multiple_choice",
      "repeats": 1,
      "should_decontaminate": false,
      "metadata": {
        "version": 1.0
      }
    },
    "mmlu_pro_health": {
      "task": "mmlu_pro_health",
      "task_alias": "health",
      "dataset_path": "TIGER-Lab/MMLU-Pro",
      "test_split": "test",
      "fewshot_split": "validation",
      "process_docs": "functools.partial(<function process_docs at 0x7fed294dfa60>, subject='health')",
      "doc_to_text": "def doc2text_mc(doc):\n    \n    prompt = f\"Question: {doc['question']}\\n\"\n    options = doc[\"options\"]\n    \n    char_idx = 0\n    for i, opt in enumerate(options):\n    \n        if opt != \"N/A\":\n            prompt += \"{}. {}\\n\".format(choices[char_idx], opt)\n            char_idx += 1\n    \n    prompt +=\"Answer:\"\n    return prompt\n",
      "doc_to_target": "def doc2tgt(doc):\n    return doc['answer_index']\n",
      "doc_to_choice": "def doc2choice(doc):\n    return alphabets[: len(doc[\"options\"])]\n",
      "description": "The following are multiple choice questions (with answers) about health. Think step by step and then finish your answer with \"the answer is (X)\" where X is the correct letter choice.\n",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "fewshot_config": {
        "sampler": "first_n"
      },
      "num_fewshot": 3,
      "metric_list": [
        {
          "metric": "acc",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "multiple_choice",
      "repeats": 1,
      "should_decontaminate": false,
      "metadata": {
        "version": 1.0
      }
    },
    "mmlu_pro_history": {
      "task": "mmlu_pro_history",
      "task_alias": "history",
      "dataset_path": "TIGER-Lab/MMLU-Pro",
      "test_split": "test",
      "fewshot_split": "validation",
      "process_docs": "functools.partial(<function process_docs at 0x7fed2bb48720>, subject='history')",
      "doc_to_text": "def doc2text_mc(doc):\n    \n    prompt = f\"Question: {doc['question']}\\n\"\n    options = doc[\"options\"]\n    \n    char_idx = 0\n    for i, opt in enumerate(options):\n    \n        if opt != \"N/A\":\n            prompt += \"{}. {}\\n\".format(choices[char_idx], opt)\n            char_idx += 1\n    \n    prompt +=\"Answer:\"\n    return prompt\n",
      "doc_to_target": "def doc2tgt(doc):\n    return doc['answer_index']\n",
      "doc_to_choice": "def doc2choice(doc):\n    return alphabets[: len(doc[\"options\"])]\n",
      "description": "The following are multiple choice questions (with answers) about history. Think step by step and then finish your answer with \"the answer is (X)\" where X is the correct letter choice.\n",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "fewshot_config": {
        "sampler": "first_n"
      },
      "num_fewshot": 3,
      "metric_list": [
        {
          "metric": "acc",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "multiple_choice",
      "repeats": 1,
      "should_decontaminate": false,
      "metadata": {
        "version": 1.0
      }
    },
    "mmlu_pro_law": {
      "task": "mmlu_pro_law",
      "task_alias": "law",
      "dataset_path": "TIGER-Lab/MMLU-Pro",
      "test_split": "test",
      "fewshot_split": "validation",
      "process_docs": "functools.partial(<function process_docs at 0x7fed2bb4ab60>, subject='law')",
      "doc_to_text": "def doc2text_mc(doc):\n    \n    prompt = f\"Question: {doc['question']}\\n\"\n    options = doc[\"options\"]\n    \n    char_idx = 0\n    for i, opt in enumerate(options):\n    \n        if opt != \"N/A\":\n            prompt += \"{}. {}\\n\".format(choices[char_idx], opt)\n            char_idx += 1\n    \n    prompt +=\"Answer:\"\n    return prompt\n",
      "doc_to_target": "def doc2tgt(doc):\n    return doc['answer_index']\n",
      "doc_to_choice": "def doc2choice(doc):\n    return alphabets[: len(doc[\"options\"])]\n",
      "description": "The following are multiple choice questions (with answers) about law. Think step by step and then finish your answer with \"the answer is (X)\" where X is the correct letter choice.\n",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "fewshot_config": {
        "sampler": "first_n"
      },
      "num_fewshot": 3,
      "metric_list": [
        {
          "metric": "acc",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "multiple_choice",
      "repeats": 1,
      "should_decontaminate": false,
      "metadata": {
        "version": 1.0
      }
    },
    "mmlu_pro_math": {
      "task": "mmlu_pro_math",
      "task_alias": "math",
      "dataset_path": "TIGER-Lab/MMLU-Pro",
      "test_split": "test",
      "fewshot_split": "validation",
      "process_docs": "functools.partial(<function process_docs at 0x7fed32934cc0>, subject='math')",
      "doc_to_text": "def doc2text_mc(doc):\n    \n    prompt = f\"Question: {doc['question']}\\n\"\n    options = doc[\"options\"]\n    \n    char_idx = 0\n    for i, opt in enumerate(options):\n    \n        if opt != \"N/A\":\n            prompt += \"{}. {}\\n\".format(choices[char_idx], opt)\n            char_idx += 1\n    \n    prompt +=\"Answer:\"\n    return prompt\n",
      "doc_to_target": "def doc2tgt(doc):\n    return doc['answer_index']\n",
      "doc_to_choice": "def doc2choice(doc):\n    return alphabets[: len(doc[\"options\"])]\n",
      "description": "The following are multiple choice questions (with answers) about math. Think step by step and then finish your answer with \"the answer is (X)\" where X is the correct letter choice.\n",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "fewshot_config": {
        "sampler": "first_n"
      },
      "num_fewshot": 3,
      "metric_list": [
        {
          "metric": "acc",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "multiple_choice",
      "repeats": 1,
      "should_decontaminate": false,
      "metadata": {
        "version": 1.0
      }
    },
    "mmlu_pro_other": {
      "task": "mmlu_pro_other",
      "task_alias": "other",
      "dataset_path": "TIGER-Lab/MMLU-Pro",
      "test_split": "test",
      "fewshot_split": "validation",
      "process_docs": "functools.partial(<function process_docs at 0x7fed32934e00>, subject='other')",
      "doc_to_text": "def doc2text_mc(doc):\n    \n    prompt = f\"Question: {doc['question']}\\n\"\n    options = doc[\"options\"]\n    \n    char_idx = 0\n    for i, opt in enumerate(options):\n    \n        if opt != \"N/A\":\n            prompt += \"{}. {}\\n\".format(choices[char_idx], opt)\n            char_idx += 1\n    \n    prompt +=\"Answer:\"\n    return prompt\n",
      "doc_to_target": "def doc2tgt(doc):\n    return doc['answer_index']\n",
      "doc_to_choice": "def doc2choice(doc):\n    return alphabets[: len(doc[\"options\"])]\n",
      "description": "The following are multiple choice questions (with answers) about other. Think step by step and then finish your answer with \"the answer is (X)\" where X is the correct letter choice.\n",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "fewshot_config": {
        "sampler": "first_n"
      },
      "num_fewshot": 3,
      "metric_list": [
        {
          "metric": "acc",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "multiple_choice",
      "repeats": 1,
      "should_decontaminate": false,
      "metadata": {
        "version": 1.0
      }
    },
    "mmlu_pro_philosophy": {
      "task": "mmlu_pro_philosophy",
      "task_alias": "philosophy",
      "dataset_path": "TIGER-Lab/MMLU-Pro",
      "test_split": "test",
      "fewshot_split": "validation",
      "process_docs": "functools.partial(<function process_docs at 0x7fed32936f20>, subject='philosophy')",
      "doc_to_text": "def doc2text_mc(doc):\n    \n    prompt = f\"Question: {doc['question']}\\n\"\n    options = doc[\"options\"]\n    \n    char_idx = 0\n    for i, opt in enumerate(options):\n    \n        if opt != \"N/A\":\n            prompt += \"{}. {}\\n\".format(choices[char_idx], opt)\n            char_idx += 1\n    \n    prompt +=\"Answer:\"\n    return prompt\n",
      "doc_to_target": "def doc2tgt(doc):\n    return doc['answer_index']\n",
      "doc_to_choice": "def doc2choice(doc):\n    return alphabets[: len(doc[\"options\"])]\n",
      "description": "The following are multiple choice questions (with answers) about philosophy. Think step by step and then finish your answer with \"the answer is (X)\" where X is the correct letter choice.\n",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "fewshot_config": {
        "sampler": "first_n"
      },
      "num_fewshot": 3,
      "metric_list": [
        {
          "metric": "acc",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "multiple_choice",
      "repeats": 1,
      "should_decontaminate": false,
      "metadata": {
        "version": 1.0
      }
    },
    "mmlu_pro_physics": {
      "task": "mmlu_pro_physics",
      "task_alias": "physics",
      "dataset_path": "TIGER-Lab/MMLU-Pro",
      "test_split": "test",
      "fewshot_split": "validation",
      "process_docs": "functools.partial(<function process_docs at 0x7fed32c1b1a0>, subject='physics')",
      "doc_to_text": "def doc2text_mc(doc):\n    \n    prompt = f\"Question: {doc['question']}\\n\"\n    options = doc[\"options\"]\n    \n    char_idx = 0\n    for i, opt in enumerate(options):\n    \n        if opt != \"N/A\":\n            prompt += \"{}. {}\\n\".format(choices[char_idx], opt)\n            char_idx += 1\n    \n    prompt +=\"Answer:\"\n    return prompt\n",
      "doc_to_target": "def doc2tgt(doc):\n    return doc['answer_index']\n",
      "doc_to_choice": "def doc2choice(doc):\n    return alphabets[: len(doc[\"options\"])]\n",
      "description": "The following are multiple choice questions (with answers) about physics. Think step by step and then finish your answer with \"the answer is (X)\" where X is the correct letter choice.\n",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "fewshot_config": {
        "sampler": "first_n"
      },
      "num_fewshot": 3,
      "metric_list": [
        {
          "metric": "acc",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "multiple_choice",
      "repeats": 1,
      "should_decontaminate": false,
      "metadata": {
        "version": 1.0
      }
    },
    "mmlu_pro_psychology": {
      "task": "mmlu_pro_psychology",
      "task_alias": "psychology",
      "dataset_path": "TIGER-Lab/MMLU-Pro",
      "test_split": "test",
      "fewshot_split": "validation",
      "process_docs": "functools.partial(<function process_docs at 0x7fed32f29080>, subject='psychology')",
      "doc_to_text": "def doc2text_mc(doc):\n    \n    prompt = f\"Question: {doc['question']}\\n\"\n    options = doc[\"options\"]\n    \n    char_idx = 0\n    for i, opt in enumerate(options):\n    \n        if opt != \"N/A\":\n            prompt += \"{}. {}\\n\".format(choices[char_idx], opt)\n            char_idx += 1\n    \n    prompt +=\"Answer:\"\n    return prompt\n",
      "doc_to_target": "def doc2tgt(doc):\n    return doc['answer_index']\n",
      "doc_to_choice": "def doc2choice(doc):\n    return alphabets[: len(doc[\"options\"])]\n",
      "description": "The following are multiple choice questions (with answers) about psychology. Think step by step and then finish your answer with \"the answer is (X)\" where X is the correct letter choice.\n",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "fewshot_config": {
        "sampler": "first_n"
      },
      "num_fewshot": 3,
      "metric_list": [
        {
          "metric": "acc",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "multiple_choice",
      "repeats": 1,
      "should_decontaminate": false,
      "metadata": {
        "version": 1.0
      }
    }
  },
  "versions": {
    "mmlu_pro": 2.0,
    "mmlu_pro_biology": 1.0,
    "mmlu_pro_business": 1.0,
    "mmlu_pro_chemistry": 1.0,
    "mmlu_pro_computer_science": 1.0,
    "mmlu_pro_economics": 1.0,
    "mmlu_pro_engineering": 1.0,
    "mmlu_pro_health": 1.0,
    "mmlu_pro_history": 1.0,
    "mmlu_pro_law": 1.0,
    "mmlu_pro_math": 1.0,
    "mmlu_pro_other": 1.0,
    "mmlu_pro_philosophy": 1.0,
    "mmlu_pro_physics": 1.0,
    "mmlu_pro_psychology": 1.0
  },
  "n-shot": {
    "mmlu_pro_biology": 3,
    "mmlu_pro_business": 3,
    "mmlu_pro_chemistry": 3,
    "mmlu_pro_computer_science": 3,
    "mmlu_pro_economics": 3,
    "mmlu_pro_engineering": 3,
    "mmlu_pro_health": 3,
    "mmlu_pro_history": 3,
    "mmlu_pro_law": 3,
    "mmlu_pro_math": 3,
    "mmlu_pro_other": 3,
    "mmlu_pro_philosophy": 3,
    "mmlu_pro_physics": 3,
    "mmlu_pro_psychology": 3
  },
  "higher_is_better": {
    "mmlu_pro": {
      "acc": true
    },
    "mmlu_pro_biology": {
      "acc": true
    },
    "mmlu_pro_business": {
      "acc": true
    },
    "mmlu_pro_chemistry": {
      "acc": true
    },
    "mmlu_pro_computer_science": {
      "acc": true
    },
    "mmlu_pro_economics": {
      "acc": true
    },
    "mmlu_pro_engineering": {
      "acc": true
    },
    "mmlu_pro_health": {
      "acc": true
    },
    "mmlu_pro_history": {
      "acc": true
    },
    "mmlu_pro_law": {
      "acc": true
    },
    "mmlu_pro_math": {
      "acc": true
    },
    "mmlu_pro_other": {
      "acc": true
    },
    "mmlu_pro_philosophy": {
      "acc": true
    },
    "mmlu_pro_physics": {
      "acc": true
    },
    "mmlu_pro_psychology": {
      "acc": true
    }
  },
  "n-samples": {
    "mmlu_pro_biology": {
      "original": 717,
      "effective": 717
    },
    "mmlu_pro_business": {
      "original": 789,
      "effective": 789
    },
    "mmlu_pro_chemistry": {
      "original": 1132,
      "effective": 1132
    },
    "mmlu_pro_computer_science": {
      "original": 410,
      "effective": 410
    },
    "mmlu_pro_economics": {
      "original": 844,
      "effective": 844
    },
    "mmlu_pro_engineering": {
      "original": 969,
      "effective": 969
    },
    "mmlu_pro_health": {
      "original": 818,
      "effective": 818
    },
    "mmlu_pro_history": {
      "original": 381,
      "effective": 381
    },
    "mmlu_pro_law": {
      "original": 1101,
      "effective": 1101
    },
    "mmlu_pro_math": {
      "original": 1351,
      "effective": 1351
    },
    "mmlu_pro_other": {
      "original": 924,
      "effective": 924
    },
    "mmlu_pro_philosophy": {
      "original": 499,
      "effective": 499
    },
    "mmlu_pro_physics": {
      "original": 1299,
      "effective": 1299
    },
    "mmlu_pro_psychology": {
      "original": 798,
      "effective": 798
    }
  },
  "config": {
    "model": "hf",
    "model_args": "pretrained=meta-llama/Llama-3.1-8B,parallelize=True,attn_implementation=sdpa",
    "model_num_parameters": 8030261248,
    "model_dtype": "torch.bfloat16",
    "model_revision": "main",
    "model_sha": "d04e592bb4f6aa9cfee91e2e20afa771667e1d4b",
    "batch_size": 1,
    "batch_sizes": [],
    "device": "cuda",
    "use_cache": null,
    "limit": null,
    "bootstrap_iters": 100000,
    "gen_kwargs": null,
    "random_seed": 0,
    "numpy_seed": 1234,
    "torch_seed": 1234,
    "fewshot_seed": 1234
  },
  "git_hash": null,
  "date": 1735085657.745451,
  "pretty_env_info": "PyTorch version: 2.5.1+cu124\nIs debug build: False\nCUDA used to build PyTorch: 12.4\nROCM used to build PyTorch: N/A\n\nOS: Rocky Linux 8.4 (Green Obsidian) (x86_64)\nGCC version: (GCC) 8.5.0 20210514 (Red Hat 8.5.0-4)\nClang version: Could not collect\nCMake version: version 3.26.5\nLibc version: glibc-2.28\n\nPython version: 3.11.7 (main, Dec 15 2023, 18:12:31) [GCC 11.2.0] (64-bit runtime)\nPython platform: Linux-4.18.0-305.19.1.el8_4.x86_64-x86_64-with-glibc2.28\nIs CUDA available: True\nCUDA runtime version: Could not collect\nCUDA_MODULE_LOADING set to: LAZY\nGPU models and configuration: \nGPU 0: NVIDIA A100-SXM4-80GB\nGPU 1: NVIDIA A100-SXM4-80GB\nGPU 2: NVIDIA A100-SXM4-80GB\nGPU 3: NVIDIA A100-SXM4-80GB\nGPU 4: NVIDIA A100-SXM4-80GB\nGPU 5: NVIDIA A100-SXM4-80GB\nGPU 6: NVIDIA A100-SXM4-80GB\nGPU 7: NVIDIA A100-SXM4-80GB\n\nNvidia driver version: 545.23.06\ncuDNN version: Probably one of the following:\n/usr/local/cuda-11.3/targets/x86_64-linux/lib/libcudnn.so.8.2.1\n/usr/local/cuda-11.3/targets/x86_64-linux/lib/libcudnn_adv_infer.so.8.2.1\n/usr/local/cuda-11.3/targets/x86_64-linux/lib/libcudnn_adv_train.so.8.2.1\n/usr/local/cuda-11.3/targets/x86_64-linux/lib/libcudnn_cnn_infer.so.8.2.1\n/usr/local/cuda-11.3/targets/x86_64-linux/lib/libcudnn_cnn_train.so.8.2.1\n/usr/local/cuda-11.3/targets/x86_64-linux/lib/libcudnn_ops_infer.so.8.2.1\n/usr/local/cuda-11.3/targets/x86_64-linux/lib/libcudnn_ops_train.so.8.2.1\nHIP runtime version: N/A\nMIOpen runtime version: N/A\nIs XNNPACK available: True\n\nCPU:\nArchitecture:        x86_64\nCPU op-mode(s):      32-bit, 64-bit\nByte Order:          Little Endian\nCPU(s):              128\nOn-line CPU(s) list: 0-127\nThread(s) per core:  2\nCore(s) per socket:  32\nSocket(s):           2\nNUMA node(s):        2\nVendor ID:           AuthenticAMD\nCPU family:          25\nModel:               1\nModel name:          AMD EPYC 7513 32-Core Processor\nStepping:            1\nCPU MHz:             3503.432\nCPU max MHz:         2600.0000\nCPU min MHz:         1500.0000\nBogoMIPS:            5190.14\nVirtualization:      AMD-V\nL1d cache:           32K\nL1i cache:           32K\nL2 cache:            512K\nL3 cache:            32768K\nNUMA node0 CPU(s):   0-31,64-95\nNUMA node1 CPU(s):   32-63,96-127\nFlags:               fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush mmx fxsr sse sse2 ht syscall nx mmxext fxsr_opt pdpe1gb rdtscp lm constant_tsc rep_good nopl nonstop_tsc cpuid extd_apicid aperfmperf pni pclmulqdq monitor ssse3 fma cx16 pcid sse4_1 sse4_2 movbe popcnt aes xsave avx f16c rdrand lahf_lm cmp_legacy svm extapic cr8_legacy abm sse4a misalignsse 3dnowprefetch osvw ibs skinit wdt tce topoext perfctr_core perfctr_nb bpext perfctr_llc mwaitx cpb cat_l3 cdp_l3 invpcid_single hw_pstate sme ssbd mba sev ibrs ibpb stibp vmmcall sev_es fsgsbase bmi1 avx2 smep bmi2 erms invpcid cqm rdt_a rdseed adx smap clflushopt clwb sha_ni xsaveopt xsavec xgetbv1 xsaves cqm_llc cqm_occup_llc cqm_mbm_total cqm_mbm_local clzero irperf xsaveerptr wbnoinvd amd_ppin arat npt lbrv svm_lock nrip_save tsc_scale vmcb_clean flushbyasid decodeassists pausefilter pfthreshold v_vmsave_vmload vgif umip pku ospke vaes vpclmulqdq rdpid overflow_recov succor smca fsrm\n\nVersions of relevant libraries:\n[pip3] numpy==2.1.3\n[pip3] torch==2.5.1\n[pip3] triton==3.1.0\n[conda] _anaconda_depends         2024.02             py311_mkl_1  \n[conda] blas                      1.0                         mkl  \n[conda] mkl                       2023.1.0         h213fc3f_46344  \n[conda] mkl-service               2.4.0           py311h5eee18b_1  \n[conda] mkl_fft                   1.3.8           py311h5eee18b_0  \n[conda] mkl_random                1.2.4           py311hdb19cb5_0  \n[conda] numpy                     1.26.4          py311h08b1b3b_0  \n[conda] numpy-base                1.26.4          py311hf175353_0  \n[conda] numpydoc                  1.5.0           py311h06a4308_0  \n[conda] torch                     2.5.1                    pypi_0    pypi\n[conda] triton                    3.1.0                    pypi_0    pypi",
  "transformers_version": "4.46.2",
  "upper_git_hash": null,
  "tokenizer_pad_token": [
    "<|end_of_text|>",
    "128001"
  ],
  "tokenizer_eos_token": [
    "<|end_of_text|>",
    "128001"
  ],
  "tokenizer_bos_token": [
    "<|begin_of_text|>",
    "128000"
  ],
  "eot_token_id": 128001,
  "max_length": 131072,
  "task_hashes": {
    "mmlu_pro_biology": "532b6ffea23571b6000dd04050f6096935ae7f0b54fd7ad57395a7c65eaf8f0c",
    "mmlu_pro_business": "6838937a5c4be347aef048492dafac52f43579cd15975c8fabab695979eda5a5",
    "mmlu_pro_chemistry": "617097d54f48220214027557f7e809b50c9801e623e93755532968098398c821",
    "mmlu_pro_computer_science": "07a1729176c8caa156868e6c166669af675d4d06ca6f15150e2355a9d7172c7f",
    "mmlu_pro_economics": "923fe2681a561d0a6a415d3e850b411ad0e8580c06de7c857f55758595c14d28",
    "mmlu_pro_engineering": "1083ae5bec086524f18fbfe1bce1bb540a5eb9752680d6766249f9efdb05a8a1",
    "mmlu_pro_health": "c7f0682693308f1725e1a6e31ac7c982886347267c6354f8a92201c28eadb128",
    "mmlu_pro_history": "0b74c386688f70e38aa56f9538593ac9c2b09b2313b7c2d1d541a010e5572139",
    "mmlu_pro_law": "5d34fe57925145ba6bf1c3f19d54c3cdabf61db3f8c24b662c90a8a1929b462a",
    "mmlu_pro_math": "b9e2509f4e90eaf2aade4a45e84c7b7582b9e21eef226047f188f32a9fc71ac2",
    "mmlu_pro_other": "f809075528212ca1198c52cdd0d4d708822b35bc24062b9ac53fc4444044acd6",
    "mmlu_pro_philosophy": "1f165260e0ea807b470ed56da1241ae3d168b6b41475ef0bec5d31c24caa6bb9",
    "mmlu_pro_physics": "fac43dfe224254564630df3c42df3e569eeb33c73942f80ffddeddcff655ec75",
    "mmlu_pro_psychology": "ebe9f049381505efa5ec35de6d386b3fdb6fcc7c0263ed2a619ec00e42dbf1dc"
  },
  "model_source": "hf",
  "model_name": "meta-llama/Llama-3.1-8B",
  "model_name_sanitized": "meta-llama__Llama-3.1-8B",
  "system_instruction": null,
  "system_instruction_sha": null,
  "fewshot_as_multiturn": false,
  "chat_template": null,
  "chat_template_sha": null,
  "start_time": 10932155.670798194,
  "end_time": 10933827.214047404,
  "total_evaluation_time_seconds": "1671.5432492103428"
}