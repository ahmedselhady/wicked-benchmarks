{
  "results": {
    "mmlu_pro": {
      "alias": "mmlu_pro"
    },
    "mmlu_pro_biology": {
      "alias": " - biology",
      "acc,none": 0.6443514644351465,
      "acc_stderr,none": 0.017890208875943954
    },
    "mmlu_pro_business": {
      "alias": " - business",
      "acc,none": 0.24461343472750316,
      "acc_stderr,none": 0.015313049007181475
    },
    "mmlu_pro_chemistry": {
      "alias": " - chemistry",
      "acc,none": 0.22791519434628976,
      "acc_stderr,none": 0.012473485886521822
    },
    "mmlu_pro_computer_science": {
      "alias": " - computer_science",
      "acc,none": 0.37317073170731707,
      "acc_stderr,none": 0.023914800723686756
    },
    "mmlu_pro_economics": {
      "alias": " - economics",
      "acc,none": 0.47393364928909953,
      "acc_stderr,none": 0.017197497175092797
    },
    "mmlu_pro_engineering": {
      "alias": " - engineering",
      "acc,none": 0.24148606811145512,
      "acc_stderr,none": 0.013755935871993093
    },
    "mmlu_pro_health": {
      "alias": " - health",
      "acc,none": 0.4767726161369193,
      "acc_stderr,none": 0.017473900405931775
    },
    "mmlu_pro_history": {
      "alias": " - history",
      "acc,none": 0.4304461942257218,
      "acc_stderr,none": 0.02540007605160154
    },
    "mmlu_pro_law": {
      "alias": " - law",
      "acc,none": 0.3024523160762943,
      "acc_stderr,none": 0.013849020726009178
    },
    "mmlu_pro_math": {
      "alias": " - math",
      "acc,none": 0.2161361954108068,
      "acc_stderr,none": 0.011202557262423977
    },
    "mmlu_pro_other": {
      "alias": " - other",
      "acc,none": 0.354978354978355,
      "acc_stderr,none": 0.015750241961897116
    },
    "mmlu_pro_philosophy": {
      "alias": " - philosophy",
      "acc,none": 0.3787575150300601,
      "acc_stderr,none": 0.021736846174250833
    },
    "mmlu_pro_physics": {
      "alias": " - physics",
      "acc,none": 0.2471131639722864,
      "acc_stderr,none": 0.011972240882313589
    },
    "mmlu_pro_psychology": {
      "alias": " - psychology",
      "acc,none": 0.556390977443609,
      "acc_stderr,none": 0.017597908854859387
    }
  },
  "groups": {
    "mmlu_pro": {
      "acc,none": 0.3458277925531915,
      "acc_stderr,none": 0.00417408927483988,
      "alias": "mmlu_pro"
    }
  },
  "group_subtasks": {
    "mmlu_pro": [
      "mmlu_pro_psychology",
      "mmlu_pro_physics",
      "mmlu_pro_philosophy",
      "mmlu_pro_other",
      "mmlu_pro_math",
      "mmlu_pro_law",
      "mmlu_pro_history",
      "mmlu_pro_health",
      "mmlu_pro_engineering",
      "mmlu_pro_economics",
      "mmlu_pro_computer_science",
      "mmlu_pro_chemistry",
      "mmlu_pro_business",
      "mmlu_pro_biology"
    ]
  },
  "configs": {
    "mmlu_pro_biology": {
      "task": "mmlu_pro_biology",
      "task_alias": "biology",
      "group": "mmlu_pro",
      "dataset_path": "TIGER-Lab/MMLU-Pro",
      "test_split": "test",
      "fewshot_split": "validation",
      "process_docs": "functools.partial(<function process_docs at 0x7f62d3921940>, subject='biology')",
      "doc_to_text": "def doc2text_mc(doc):\n    \n    prompt = f\"Question: {doc['question']}\\n\"\n    options = doc[\"options\"]\n    \n    char_idx = 0\n    for i, opt in enumerate(options):\n    \n        if opt != \"N/A\":\n            prompt += \"{}. {}\\n\".format(choices[char_idx], opt)\n            char_idx += 1\n    \n    prompt +=\"Answer:\"\n    return prompt\n",
      "doc_to_target": "def doc2tgt(doc):\n    return doc['answer_index']\n",
      "doc_to_choice": "def doc2choice(doc):\n    return alphabets[: len(doc[\"options\"])]\n",
      "description": "The following are multiple choice questions (with answers) about biology. Think step by step and then finish your answer with \"the answer is (X)\" where X is the correct letter choice.\n",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "fewshot_config": {
        "sampler": "first_n"
      },
      "num_fewshot": 3,
      "metric_list": [
        {
          "metric": "acc",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "multiple_choice",
      "repeats": 1,
      "should_decontaminate": false,
      "metadata": {
        "version": 2.0
      }
    },
    "mmlu_pro_business": {
      "task": "mmlu_pro_business",
      "task_alias": "business",
      "group": "mmlu_pro",
      "dataset_path": "TIGER-Lab/MMLU-Pro",
      "test_split": "test",
      "fewshot_split": "validation",
      "process_docs": "functools.partial(<function process_docs at 0x7f62c9d7b9c0>, subject='business')",
      "doc_to_text": "def doc2text_mc(doc):\n    \n    prompt = f\"Question: {doc['question']}\\n\"\n    options = doc[\"options\"]\n    \n    char_idx = 0\n    for i, opt in enumerate(options):\n    \n        if opt != \"N/A\":\n            prompt += \"{}. {}\\n\".format(choices[char_idx], opt)\n            char_idx += 1\n    \n    prompt +=\"Answer:\"\n    return prompt\n",
      "doc_to_target": "def doc2tgt(doc):\n    return doc['answer_index']\n",
      "doc_to_choice": "def doc2choice(doc):\n    return alphabets[: len(doc[\"options\"])]\n",
      "description": "The following are multiple choice questions (with answers) about business. Think step by step and then finish your answer with \"the answer is (X)\" where X is the correct letter choice.\n",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "fewshot_config": {
        "sampler": "first_n"
      },
      "num_fewshot": 3,
      "metric_list": [
        {
          "metric": "acc",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "multiple_choice",
      "repeats": 1,
      "should_decontaminate": false,
      "metadata": {
        "version": 2.0
      }
    },
    "mmlu_pro_chemistry": {
      "task": "mmlu_pro_chemistry",
      "task_alias": "chemistry",
      "group": "mmlu_pro",
      "dataset_path": "TIGER-Lab/MMLU-Pro",
      "test_split": "test",
      "fewshot_split": "validation",
      "process_docs": "functools.partial(<function process_docs at 0x7f62c9dbe700>, subject='chemistry')",
      "doc_to_text": "def doc2text_mc(doc):\n    \n    prompt = f\"Question: {doc['question']}\\n\"\n    options = doc[\"options\"]\n    \n    char_idx = 0\n    for i, opt in enumerate(options):\n    \n        if opt != \"N/A\":\n            prompt += \"{}. {}\\n\".format(choices[char_idx], opt)\n            char_idx += 1\n    \n    prompt +=\"Answer:\"\n    return prompt\n",
      "doc_to_target": "def doc2tgt(doc):\n    return doc['answer_index']\n",
      "doc_to_choice": "def doc2choice(doc):\n    return alphabets[: len(doc[\"options\"])]\n",
      "description": "The following are multiple choice questions (with answers) about chemistry. Think step by step and then finish your answer with \"the answer is (X)\" where X is the correct letter choice.\n",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "fewshot_config": {
        "sampler": "first_n"
      },
      "num_fewshot": 3,
      "metric_list": [
        {
          "metric": "acc",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "multiple_choice",
      "repeats": 1,
      "should_decontaminate": false,
      "metadata": {
        "version": 2.0
      }
    },
    "mmlu_pro_computer_science": {
      "task": "mmlu_pro_computer_science",
      "task_alias": "computer_science",
      "group": "mmlu_pro",
      "dataset_path": "TIGER-Lab/MMLU-Pro",
      "test_split": "test",
      "fewshot_split": "validation",
      "process_docs": "functools.partial(<function process_docs at 0x7f62c9dbee80>, subject='computer science')",
      "doc_to_text": "def doc2text_mc(doc):\n    \n    prompt = f\"Question: {doc['question']}\\n\"\n    options = doc[\"options\"]\n    \n    char_idx = 0\n    for i, opt in enumerate(options):\n    \n        if opt != \"N/A\":\n            prompt += \"{}. {}\\n\".format(choices[char_idx], opt)\n            char_idx += 1\n    \n    prompt +=\"Answer:\"\n    return prompt\n",
      "doc_to_target": "def doc2tgt(doc):\n    return doc['answer_index']\n",
      "doc_to_choice": "def doc2choice(doc):\n    return alphabets[: len(doc[\"options\"])]\n",
      "description": "The following are multiple choice questions (with answers) about computer science. Think step by step and then finish your answer with \"the answer is (X)\" where X is the correct letter choice.\n",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "fewshot_config": {
        "sampler": "first_n"
      },
      "num_fewshot": 3,
      "metric_list": [
        {
          "metric": "acc",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "multiple_choice",
      "repeats": 1,
      "should_decontaminate": false,
      "metadata": {
        "version": 2.0
      }
    },
    "mmlu_pro_economics": {
      "task": "mmlu_pro_economics",
      "task_alias": "economics",
      "group": "mmlu_pro",
      "dataset_path": "TIGER-Lab/MMLU-Pro",
      "test_split": "test",
      "fewshot_split": "validation",
      "process_docs": "functools.partial(<function process_docs at 0x7f62c8f0ce00>, subject='economics')",
      "doc_to_text": "def doc2text_mc(doc):\n    \n    prompt = f\"Question: {doc['question']}\\n\"\n    options = doc[\"options\"]\n    \n    char_idx = 0\n    for i, opt in enumerate(options):\n    \n        if opt != \"N/A\":\n            prompt += \"{}. {}\\n\".format(choices[char_idx], opt)\n            char_idx += 1\n    \n    prompt +=\"Answer:\"\n    return prompt\n",
      "doc_to_target": "def doc2tgt(doc):\n    return doc['answer_index']\n",
      "doc_to_choice": "def doc2choice(doc):\n    return alphabets[: len(doc[\"options\"])]\n",
      "description": "The following are multiple choice questions (with answers) about economics. Think step by step and then finish your answer with \"the answer is (X)\" where X is the correct letter choice.\n",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "fewshot_config": {
        "sampler": "first_n"
      },
      "num_fewshot": 3,
      "metric_list": [
        {
          "metric": "acc",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "multiple_choice",
      "repeats": 1,
      "should_decontaminate": false,
      "metadata": {
        "version": 2.0
      }
    },
    "mmlu_pro_engineering": {
      "task": "mmlu_pro_engineering",
      "task_alias": "engineering",
      "group": "mmlu_pro",
      "dataset_path": "TIGER-Lab/MMLU-Pro",
      "test_split": "test",
      "fewshot_split": "validation",
      "process_docs": "functools.partial(<function process_docs at 0x7f62c8f0d800>, subject='engineering')",
      "doc_to_text": "def doc2text_mc(doc):\n    \n    prompt = f\"Question: {doc['question']}\\n\"\n    options = doc[\"options\"]\n    \n    char_idx = 0\n    for i, opt in enumerate(options):\n    \n        if opt != \"N/A\":\n            prompt += \"{}. {}\\n\".format(choices[char_idx], opt)\n            char_idx += 1\n    \n    prompt +=\"Answer:\"\n    return prompt\n",
      "doc_to_target": "def doc2tgt(doc):\n    return doc['answer_index']\n",
      "doc_to_choice": "def doc2choice(doc):\n    return alphabets[: len(doc[\"options\"])]\n",
      "description": "The following are multiple choice questions (with answers) about engineering. Think step by step and then finish your answer with \"the answer is (X)\" where X is the correct letter choice.\n",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "fewshot_config": {
        "sampler": "first_n"
      },
      "num_fewshot": 3,
      "metric_list": [
        {
          "metric": "acc",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "multiple_choice",
      "repeats": 1,
      "should_decontaminate": false,
      "metadata": {
        "version": 2.0
      }
    },
    "mmlu_pro_health": {
      "task": "mmlu_pro_health",
      "task_alias": "health",
      "group": "mmlu_pro",
      "dataset_path": "TIGER-Lab/MMLU-Pro",
      "test_split": "test",
      "fewshot_split": "validation",
      "process_docs": "functools.partial(<function process_docs at 0x7f62c8f0f4c0>, subject='health')",
      "doc_to_text": "def doc2text_mc(doc):\n    \n    prompt = f\"Question: {doc['question']}\\n\"\n    options = doc[\"options\"]\n    \n    char_idx = 0\n    for i, opt in enumerate(options):\n    \n        if opt != \"N/A\":\n            prompt += \"{}. {}\\n\".format(choices[char_idx], opt)\n            char_idx += 1\n    \n    prompt +=\"Answer:\"\n    return prompt\n",
      "doc_to_target": "def doc2tgt(doc):\n    return doc['answer_index']\n",
      "doc_to_choice": "def doc2choice(doc):\n    return alphabets[: len(doc[\"options\"])]\n",
      "description": "The following are multiple choice questions (with answers) about health. Think step by step and then finish your answer with \"the answer is (X)\" where X is the correct letter choice.\n",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "fewshot_config": {
        "sampler": "first_n"
      },
      "num_fewshot": 3,
      "metric_list": [
        {
          "metric": "acc",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "multiple_choice",
      "repeats": 1,
      "should_decontaminate": false,
      "metadata": {
        "version": 2.0
      }
    },
    "mmlu_pro_history": {
      "task": "mmlu_pro_history",
      "task_alias": "history",
      "group": "mmlu_pro",
      "dataset_path": "TIGER-Lab/MMLU-Pro",
      "test_split": "test",
      "fewshot_split": "validation",
      "process_docs": "functools.partial(<function process_docs at 0x7f62c8f0f7e0>, subject='history')",
      "doc_to_text": "def doc2text_mc(doc):\n    \n    prompt = f\"Question: {doc['question']}\\n\"\n    options = doc[\"options\"]\n    \n    char_idx = 0\n    for i, opt in enumerate(options):\n    \n        if opt != \"N/A\":\n            prompt += \"{}. {}\\n\".format(choices[char_idx], opt)\n            char_idx += 1\n    \n    prompt +=\"Answer:\"\n    return prompt\n",
      "doc_to_target": "def doc2tgt(doc):\n    return doc['answer_index']\n",
      "doc_to_choice": "def doc2choice(doc):\n    return alphabets[: len(doc[\"options\"])]\n",
      "description": "The following are multiple choice questions (with answers) about history. Think step by step and then finish your answer with \"the answer is (X)\" where X is the correct letter choice.\n",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "fewshot_config": {
        "sampler": "first_n"
      },
      "num_fewshot": 3,
      "metric_list": [
        {
          "metric": "acc",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "multiple_choice",
      "repeats": 1,
      "should_decontaminate": false,
      "metadata": {
        "version": 2.0
      }
    },
    "mmlu_pro_law": {
      "task": "mmlu_pro_law",
      "task_alias": "law",
      "group": "mmlu_pro",
      "dataset_path": "TIGER-Lab/MMLU-Pro",
      "test_split": "test",
      "fewshot_split": "validation",
      "process_docs": "functools.partial(<function process_docs at 0x7f62c8f65e40>, subject='law')",
      "doc_to_text": "def doc2text_mc(doc):\n    \n    prompt = f\"Question: {doc['question']}\\n\"\n    options = doc[\"options\"]\n    \n    char_idx = 0\n    for i, opt in enumerate(options):\n    \n        if opt != \"N/A\":\n            prompt += \"{}. {}\\n\".format(choices[char_idx], opt)\n            char_idx += 1\n    \n    prompt +=\"Answer:\"\n    return prompt\n",
      "doc_to_target": "def doc2tgt(doc):\n    return doc['answer_index']\n",
      "doc_to_choice": "def doc2choice(doc):\n    return alphabets[: len(doc[\"options\"])]\n",
      "description": "The following are multiple choice questions (with answers) about law. Think step by step and then finish your answer with \"the answer is (X)\" where X is the correct letter choice.\n",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "fewshot_config": {
        "sampler": "first_n"
      },
      "num_fewshot": 3,
      "metric_list": [
        {
          "metric": "acc",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "multiple_choice",
      "repeats": 1,
      "should_decontaminate": false,
      "metadata": {
        "version": 2.0
      }
    },
    "mmlu_pro_math": {
      "task": "mmlu_pro_math",
      "task_alias": "math",
      "group": "mmlu_pro",
      "dataset_path": "TIGER-Lab/MMLU-Pro",
      "test_split": "test",
      "fewshot_split": "validation",
      "process_docs": "functools.partial(<function process_docs at 0x7f62c8f665c0>, subject='math')",
      "doc_to_text": "def doc2text_mc(doc):\n    \n    prompt = f\"Question: {doc['question']}\\n\"\n    options = doc[\"options\"]\n    \n    char_idx = 0\n    for i, opt in enumerate(options):\n    \n        if opt != \"N/A\":\n            prompt += \"{}. {}\\n\".format(choices[char_idx], opt)\n            char_idx += 1\n    \n    prompt +=\"Answer:\"\n    return prompt\n",
      "doc_to_target": "def doc2tgt(doc):\n    return doc['answer_index']\n",
      "doc_to_choice": "def doc2choice(doc):\n    return alphabets[: len(doc[\"options\"])]\n",
      "description": "The following are multiple choice questions (with answers) about math. Think step by step and then finish your answer with \"the answer is (X)\" where X is the correct letter choice.\n",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "fewshot_config": {
        "sampler": "first_n"
      },
      "num_fewshot": 3,
      "metric_list": [
        {
          "metric": "acc",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "multiple_choice",
      "repeats": 1,
      "should_decontaminate": false,
      "metadata": {
        "version": 2.0
      }
    },
    "mmlu_pro_other": {
      "task": "mmlu_pro_other",
      "task_alias": "other",
      "group": "mmlu_pro",
      "dataset_path": "TIGER-Lab/MMLU-Pro",
      "test_split": "test",
      "fewshot_split": "validation",
      "process_docs": "functools.partial(<function process_docs at 0x7f62c8d48680>, subject='other')",
      "doc_to_text": "def doc2text_mc(doc):\n    \n    prompt = f\"Question: {doc['question']}\\n\"\n    options = doc[\"options\"]\n    \n    char_idx = 0\n    for i, opt in enumerate(options):\n    \n        if opt != \"N/A\":\n            prompt += \"{}. {}\\n\".format(choices[char_idx], opt)\n            char_idx += 1\n    \n    prompt +=\"Answer:\"\n    return prompt\n",
      "doc_to_target": "def doc2tgt(doc):\n    return doc['answer_index']\n",
      "doc_to_choice": "def doc2choice(doc):\n    return alphabets[: len(doc[\"options\"])]\n",
      "description": "The following are multiple choice questions (with answers) about other. Think step by step and then finish your answer with \"the answer is (X)\" where X is the correct letter choice.\n",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "fewshot_config": {
        "sampler": "first_n"
      },
      "num_fewshot": 3,
      "metric_list": [
        {
          "metric": "acc",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "multiple_choice",
      "repeats": 1,
      "should_decontaminate": false,
      "metadata": {
        "version": 2.0
      }
    },
    "mmlu_pro_philosophy": {
      "task": "mmlu_pro_philosophy",
      "task_alias": "philosophy",
      "group": "mmlu_pro",
      "dataset_path": "TIGER-Lab/MMLU-Pro",
      "test_split": "test",
      "fewshot_split": "validation",
      "process_docs": "functools.partial(<function process_docs at 0x7f62c8d48f40>, subject='philosophy')",
      "doc_to_text": "def doc2text_mc(doc):\n    \n    prompt = f\"Question: {doc['question']}\\n\"\n    options = doc[\"options\"]\n    \n    char_idx = 0\n    for i, opt in enumerate(options):\n    \n        if opt != \"N/A\":\n            prompt += \"{}. {}\\n\".format(choices[char_idx], opt)\n            char_idx += 1\n    \n    prompt +=\"Answer:\"\n    return prompt\n",
      "doc_to_target": "def doc2tgt(doc):\n    return doc['answer_index']\n",
      "doc_to_choice": "def doc2choice(doc):\n    return alphabets[: len(doc[\"options\"])]\n",
      "description": "The following are multiple choice questions (with answers) about philosophy. Think step by step and then finish your answer with \"the answer is (X)\" where X is the correct letter choice.\n",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "fewshot_config": {
        "sampler": "first_n"
      },
      "num_fewshot": 3,
      "metric_list": [
        {
          "metric": "acc",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "multiple_choice",
      "repeats": 1,
      "should_decontaminate": false,
      "metadata": {
        "version": 2.0
      }
    },
    "mmlu_pro_physics": {
      "task": "mmlu_pro_physics",
      "task_alias": "physics",
      "group": "mmlu_pro",
      "dataset_path": "TIGER-Lab/MMLU-Pro",
      "test_split": "test",
      "fewshot_split": "validation",
      "process_docs": "functools.partial(<function process_docs at 0x7f62c8d4ae80>, subject='physics')",
      "doc_to_text": "def doc2text_mc(doc):\n    \n    prompt = f\"Question: {doc['question']}\\n\"\n    options = doc[\"options\"]\n    \n    char_idx = 0\n    for i, opt in enumerate(options):\n    \n        if opt != \"N/A\":\n            prompt += \"{}. {}\\n\".format(choices[char_idx], opt)\n            char_idx += 1\n    \n    prompt +=\"Answer:\"\n    return prompt\n",
      "doc_to_target": "def doc2tgt(doc):\n    return doc['answer_index']\n",
      "doc_to_choice": "def doc2choice(doc):\n    return alphabets[: len(doc[\"options\"])]\n",
      "description": "The following are multiple choice questions (with answers) about physics. Think step by step and then finish your answer with \"the answer is (X)\" where X is the correct letter choice.\n",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "fewshot_config": {
        "sampler": "first_n"
      },
      "num_fewshot": 3,
      "metric_list": [
        {
          "metric": "acc",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "multiple_choice",
      "repeats": 1,
      "should_decontaminate": false,
      "metadata": {
        "version": 2.0
      }
    },
    "mmlu_pro_psychology": {
      "task": "mmlu_pro_psychology",
      "task_alias": "psychology",
      "group": "mmlu_pro",
      "dataset_path": "TIGER-Lab/MMLU-Pro",
      "test_split": "test",
      "fewshot_split": "validation",
      "process_docs": "functools.partial(<function process_docs at 0x7f62c8d9c680>, subject='psychology')",
      "doc_to_text": "def doc2text_mc(doc):\n    \n    prompt = f\"Question: {doc['question']}\\n\"\n    options = doc[\"options\"]\n    \n    char_idx = 0\n    for i, opt in enumerate(options):\n    \n        if opt != \"N/A\":\n            prompt += \"{}. {}\\n\".format(choices[char_idx], opt)\n            char_idx += 1\n    \n    prompt +=\"Answer:\"\n    return prompt\n",
      "doc_to_target": "def doc2tgt(doc):\n    return doc['answer_index']\n",
      "doc_to_choice": "def doc2choice(doc):\n    return alphabets[: len(doc[\"options\"])]\n",
      "description": "The following are multiple choice questions (with answers) about psychology. Think step by step and then finish your answer with \"the answer is (X)\" where X is the correct letter choice.\n",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "fewshot_config": {
        "sampler": "first_n"
      },
      "num_fewshot": 3,
      "metric_list": [
        {
          "metric": "acc",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "multiple_choice",
      "repeats": 1,
      "should_decontaminate": false,
      "metadata": {
        "version": 2.0
      }
    }
  },
  "versions": {
    "mmlu_pro_biology": 2.0,
    "mmlu_pro_business": 2.0,
    "mmlu_pro_chemistry": 2.0,
    "mmlu_pro_computer_science": 2.0,
    "mmlu_pro_economics": 2.0,
    "mmlu_pro_engineering": 2.0,
    "mmlu_pro_health": 2.0,
    "mmlu_pro_history": 2.0,
    "mmlu_pro_law": 2.0,
    "mmlu_pro_math": 2.0,
    "mmlu_pro_other": 2.0,
    "mmlu_pro_philosophy": 2.0,
    "mmlu_pro_physics": 2.0,
    "mmlu_pro_psychology": 2.0
  },
  "n-shot": {
    "mmlu_pro": 3,
    "mmlu_pro_biology": 3,
    "mmlu_pro_business": 3,
    "mmlu_pro_chemistry": 3,
    "mmlu_pro_computer_science": 3,
    "mmlu_pro_economics": 3,
    "mmlu_pro_engineering": 3,
    "mmlu_pro_health": 3,
    "mmlu_pro_history": 3,
    "mmlu_pro_law": 3,
    "mmlu_pro_math": 3,
    "mmlu_pro_other": 3,
    "mmlu_pro_philosophy": 3,
    "mmlu_pro_physics": 3,
    "mmlu_pro_psychology": 3
  },
  "higher_is_better": {
    "mmlu_pro": {
      "acc": true
    },
    "mmlu_pro_biology": {
      "acc": true
    },
    "mmlu_pro_business": {
      "acc": true
    },
    "mmlu_pro_chemistry": {
      "acc": true
    },
    "mmlu_pro_computer_science": {
      "acc": true
    },
    "mmlu_pro_economics": {
      "acc": true
    },
    "mmlu_pro_engineering": {
      "acc": true
    },
    "mmlu_pro_health": {
      "acc": true
    },
    "mmlu_pro_history": {
      "acc": true
    },
    "mmlu_pro_law": {
      "acc": true
    },
    "mmlu_pro_math": {
      "acc": true
    },
    "mmlu_pro_other": {
      "acc": true
    },
    "mmlu_pro_philosophy": {
      "acc": true
    },
    "mmlu_pro_physics": {
      "acc": true
    },
    "mmlu_pro_psychology": {
      "acc": true
    }
  },
  "n-samples": {
    "mmlu_pro_psychology": {
      "original": 798,
      "effective": 798
    },
    "mmlu_pro_physics": {
      "original": 1299,
      "effective": 1299
    },
    "mmlu_pro_philosophy": {
      "original": 499,
      "effective": 499
    },
    "mmlu_pro_other": {
      "original": 924,
      "effective": 924
    },
    "mmlu_pro_math": {
      "original": 1351,
      "effective": 1351
    },
    "mmlu_pro_law": {
      "original": 1101,
      "effective": 1101
    },
    "mmlu_pro_history": {
      "original": 381,
      "effective": 381
    },
    "mmlu_pro_health": {
      "original": 818,
      "effective": 818
    },
    "mmlu_pro_engineering": {
      "original": 969,
      "effective": 969
    },
    "mmlu_pro_economics": {
      "original": 844,
      "effective": 844
    },
    "mmlu_pro_computer_science": {
      "original": 410,
      "effective": 410
    },
    "mmlu_pro_chemistry": {
      "original": 1132,
      "effective": 1132
    },
    "mmlu_pro_business": {
      "original": 789,
      "effective": 789
    },
    "mmlu_pro_biology": {
      "original": 717,
      "effective": 717
    }
  },
  "config": {
    "model": "hf",
    "model_args": "pretrained=meta-llama/Llama-3.1-8B,parallelize=True,attn_implementation=sdpa",
    "model_num_parameters": 8030261248,
    "model_dtype": "torch.bfloat16",
    "model_revision": "main",
    "model_sha": "d04e592bb4f6aa9cfee91e2e20afa771667e1d4b",
    "batch_size": 1,
    "batch_sizes": [],
    "device": "cuda",
    "use_cache": null,
    "limit": null,
    "bootstrap_iters": 100000,
    "gen_kwargs": null,
    "random_seed": 0,
    "numpy_seed": 1234,
    "torch_seed": 1234,
    "fewshot_seed": 1234
  },
  "git_hash": null,
  "date": 1730731277.1065524,
  "pretty_env_info": "PyTorch version: 2.4.1+cu121\nIs debug build: False\nCUDA used to build PyTorch: 12.1\nROCM used to build PyTorch: N/A\n\nOS: Rocky Linux 8.4 (Green Obsidian) (x86_64)\nGCC version: (GCC) 8.5.0 20210514 (Red Hat 8.5.0-4)\nClang version: Could not collect\nCMake version: Could not collect\nLibc version: glibc-2.28\n\nPython version: 3.11.7 (main, Dec 15 2023, 18:12:31) [GCC 11.2.0] (64-bit runtime)\nPython platform: Linux-4.18.0-305.19.1.el8_4.x86_64-x86_64-with-glibc2.28\nIs CUDA available: True\nCUDA runtime version: Could not collect\nCUDA_MODULE_LOADING set to: LAZY\nGPU models and configuration: \nGPU 0: NVIDIA A100-SXM4-80GB\nGPU 1: NVIDIA A100-SXM4-80GB\nGPU 2: NVIDIA A100-SXM4-80GB\nGPU 3: NVIDIA A100-SXM4-80GB\n\nNvidia driver version: 535.104.12\ncuDNN version: Probably one of the following:\n/usr/local/cuda-11.3/targets/x86_64-linux/lib/libcudnn.so.8.2.1\n/usr/local/cuda-11.3/targets/x86_64-linux/lib/libcudnn_adv_infer.so.8.2.1\n/usr/local/cuda-11.3/targets/x86_64-linux/lib/libcudnn_adv_train.so.8.2.1\n/usr/local/cuda-11.3/targets/x86_64-linux/lib/libcudnn_cnn_infer.so.8.2.1\n/usr/local/cuda-11.3/targets/x86_64-linux/lib/libcudnn_cnn_train.so.8.2.1\n/usr/local/cuda-11.3/targets/x86_64-linux/lib/libcudnn_ops_infer.so.8.2.1\n/usr/local/cuda-11.3/targets/x86_64-linux/lib/libcudnn_ops_train.so.8.2.1\nHIP runtime version: N/A\nMIOpen runtime version: N/A\nIs XNNPACK available: True\n\nCPU:\nArchitecture:        x86_64\nCPU op-mode(s):      32-bit, 64-bit\nByte Order:          Little Endian\nCPU(s):              128\nOn-line CPU(s) list: 0-127\nThread(s) per core:  2\nCore(s) per socket:  32\nSocket(s):           2\nNUMA node(s):        2\nVendor ID:           AuthenticAMD\nCPU family:          25\nModel:               1\nModel name:          AMD EPYC 7513 32-Core Processor\nStepping:            1\nCPU MHz:             3548.393\nCPU max MHz:         2600.0000\nCPU min MHz:         1500.0000\nBogoMIPS:            5190.38\nVirtualization:      AMD-V\nL1d cache:           32K\nL1i cache:           32K\nL2 cache:            512K\nL3 cache:            32768K\nNUMA node0 CPU(s):   0-31,64-95\nNUMA node1 CPU(s):   32-63,96-127\nFlags:               fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush mmx fxsr sse sse2 ht syscall nx mmxext fxsr_opt pdpe1gb rdtscp lm constant_tsc rep_good nopl nonstop_tsc cpuid extd_apicid aperfmperf pni pclmulqdq monitor ssse3 fma cx16 pcid sse4_1 sse4_2 movbe popcnt aes xsave avx f16c rdrand lahf_lm cmp_legacy svm extapic cr8_legacy abm sse4a misalignsse 3dnowprefetch osvw ibs skinit wdt tce topoext perfctr_core perfctr_nb bpext perfctr_llc mwaitx cpb cat_l3 cdp_l3 invpcid_single hw_pstate sme ssbd mba sev ibrs ibpb stibp vmmcall sev_es fsgsbase bmi1 avx2 smep bmi2 erms invpcid cqm rdt_a rdseed adx smap clflushopt clwb sha_ni xsaveopt xsavec xgetbv1 xsaves cqm_llc cqm_occup_llc cqm_mbm_total cqm_mbm_local clzero irperf xsaveerptr wbnoinvd amd_ppin arat npt lbrv svm_lock nrip_save tsc_scale vmcb_clean flushbyasid decodeassists pausefilter pfthreshold v_vmsave_vmload vgif umip pku ospke vaes vpclmulqdq rdpid overflow_recov succor smca fsrm\n\nVersions of relevant libraries:\n[pip3] mypy-extensions==1.0.0\n[pip3] numpy==1.26.4\n[pip3] torch==2.4.1\n[pip3] triton==3.0.0\n[conda] numpy                     1.26.4                   pypi_0    pypi\n[conda] optree                    0.11.0                   pypi_0    pypi\n[conda] torch                     2.4.1                    pypi_0    pypi\n[conda] torchvision               0.19.1                   pypi_0    pypi\n[conda] triton                    3.0.0                    pypi_0    pypi",
  "transformers_version": "4.45.0.dev0",
  "upper_git_hash": null,
  "tokenizer_pad_token": [
    "<|end_of_text|>",
    128001
  ],
  "tokenizer_eos_token": [
    "<|end_of_text|>",
    128001
  ],
  "tokenizer_bos_token": [
    "<|begin_of_text|>",
    128000
  ],
  "eot_token_id": 128001,
  "max_length": 131072,
  "task_hashes": {
    "mmlu_pro_psychology": "2c859b72befbe31bb80bb3e54ff0a095418a9c47e407f5327f0e87c8507f34ad",
    "mmlu_pro_physics": "bcc0441273492d5e14b867f4404bfaf7eba28ccfe26222055b8da1e05b4b0504",
    "mmlu_pro_philosophy": "6439efc021bcbab29ef5b2577b82b173947a662dc8961275798cb0f7e224bb33",
    "mmlu_pro_other": "11a656b42c46aac0c0fc24eae41b4131ff5fe75d5bb57c529e0dff412bb616cc",
    "mmlu_pro_math": "f9ff801ac35e96baf47f437bb0d1f2f0e3eafe84b9a3c357affa1adf650368a3",
    "mmlu_pro_law": "ebadbd76b4769491e9d433b168014bd3e4da526c846775adb58bc85bec0c4e07",
    "mmlu_pro_history": "beefb8255773b4997e4cb40ddde89e0bc0d42d2c5e8ea796c00ee8d40e410147",
    "mmlu_pro_health": "6bad641e1c33d2f30e32e6158455c0c5aced7b612105ee69128d7a0424f89150",
    "mmlu_pro_engineering": "804acd52700ab3573f3f356bbef93ba93d3e62d2b32e6797fdadb270d04acf12",
    "mmlu_pro_economics": "e3fbfe9bc3c3f936681ea4923916e3621465ae9762a25810016ec0deae9a6c67",
    "mmlu_pro_computer_science": "44b4c4c8918fab4897ab6c8e417f19ba2272e49132ce799665ad2bca80dde406",
    "mmlu_pro_chemistry": "f7c74b8c5b37f2ec356c3a34cd3beb1861d9c6157c2d3a8847b29e5f84d4d16c",
    "mmlu_pro_business": "ef1e336327ab8be8b1a8d99a66553a369558f6fbbcabd0f195ad35ebc5ae4c2b",
    "mmlu_pro_biology": "722adf8e51c01d3f420806387b5103ffdc0036224bb74c1672b0765bee1adad1"
  },
  "model_source": "hf",
  "model_name": "meta-llama/Llama-3.1-8B",
  "model_name_sanitized": "meta-llama__Llama-3.1-8B",
  "system_instruction": null,
  "system_instruction_sha": null,
  "fewshot_as_multiturn": false,
  "chat_template": null,
  "chat_template_sha": null,
  "start_time": 3968348.710392162,
  "end_time": 3969349.964288494,
  "total_evaluation_time_seconds": "1001.2538963318802"
}